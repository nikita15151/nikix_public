import logging
from itertools import product
from logging.handlers import RotatingFileHandler
from venv import logger
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from aiogram.types import BufferedInputFile
from dotenv import load_dotenv
from datetime import datetime
import asyncio
import json

from pyexpat.errors import messages

import database
import parserAnki
import random
import os
from redis_nikix import redis_connect, upload_users, check_and_add_user, cache_products, get_cached_products, \
    get_search_products, get_redis_brands, upload_user_index_brand, get_brand_and_index, redis_delete_all_products, \
    redis_delete_product, delete_redis_users, cache_sizes_length, get_sizes_length, cache_support_link, \
    get_support_link, cache_drop_access, get_drop_access, give_redis_drop_access, cache_drop_info, get_drop_info

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.getLogger("aiogram").setLevel(logging.WARNING)
handler = RotatingFileHandler("bot.log", maxBytes=5 * 1024 * 1024, backupCount=3, encoding='utf-8',)
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[handler, logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))
CHANNEL_PARSING_ID = os.getenv("CHANNEL_PARSING_ID")
CHAT_ORDERS_ID = int(os.getenv("CHAT_ORDERS_ID"))
START_TEXT = "–°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage()) # –ø–∞–º—è—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
sizes_cache = {}
length_cache = {}
drop_password = ""

# –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
async def send_admin_message(message: str, is_log=False):
    if is_log == False:
        await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è <b>–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message}", parse_mode="HTML")
    logger.info(message)

# –†–∞–±–æ—Ç–∞ —Å –∫—ç—à–æ–º —Ä–∞–∑–º–µ—Ä–æ–≤
try:
    with open("sizes_cache.json", "r") as f:
        sizes_cache = json.load(f)
except FileNotFoundError:
    sizes_cache = {}

async def fetch_sizes():
    urls = await database.fetch_url_sizes()
    sizes = await parserAnki.get_all_sizes(urls)
    return sizes

async def update_cache():
    global sizes_cache
    time_flag = 0
    while True:
        current_time = int(str(datetime.now().time()).split(":")[0])
        if current_time >= 1 and current_time <= 22:
            time_flag = 0
            teh_text = "–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–æ–Ω—á–µ–Ω"
            sizes = await fetch_sizes() # –°–∞–º –ø–∞—Ä—Å–∏–Ω–≥
            flag = 0
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            for key in sizes:
                size = sizes[key]
                if size != -1:
                    sizes_cache[key] = size # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–∫–∏ –±–µ—Ä–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                else: # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –æ—à–∏–±–∫–∞, –Ω–∏—á–µ–≥–æ –Ω–µ –º–µ–Ω—è–µ–º
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ä–∞–∑–º–µ—Ä–æ–≤: {key}")
                    if key not in sizes_cache:
                        sizes_cache[key] = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ"] # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—à–∏–±–∫–∞ –∏ –µ–≥–æ –Ω–µ—Ç –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º —Å–ª–æ–≤–∞—Ä–µ, —Å—Ç–∞–≤–∏–º —á—Ç–æ —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç
                        logger.error(f"–ù–µ—Ç –≤ –∫—ç—à–µ —Ä–∞–∑–º–µ—Ä–∞: {key}")
                    teh_text += f"\n–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {key}"
                    flag = 1

            if flag == 0:
                teh_text += " –±–µ–∑ –æ—à–∏–±–æ–∫"

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ json –Ω–∞ —Å–ª—É—á–∞–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            with open('sizes_cache.json', 'w') as f:
                json.dump(sizes_cache, f)

            wait_time = random.randint(40, 80) * 60 # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç 40 –¥–æ 80 –º–∏–Ω—É—Ç
            teh_text += f"\n–°–ª–µ–¥—É—é—â–∏–π —á–µ—Ä–µ–∑ {int(wait_time/60)} –º–∏–Ω—É—Ç"

            if flag == 0:
                await bot.send_message(CHANNEL_PARSING_ID, teh_text, parse_mode="HTML") # –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫ –ø–∏—à–µ–º –≤ –∫–∞–Ω–∞–ª
                logger.info(teh_text)
            else:
                await send_admin_message(teh_text) # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏ –ø–∏—à–µ–º –≤ –±–æ—Ç–∞
                logger.error(teh_text)
        else:
            wait_time = 7200 # –°–ø–∏–º 2 —á–∞—Å–∞ –Ω–æ—á—å—é
            if time_flag == 0:
                await send_admin_message(message=f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–æ—á—å")
                logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –≤—ã–∫–ª—é—á–µ–Ω –Ω–∞ –Ω–æ—á—å")
                time_flag = 1
        await asyncio.sleep(wait_time)


async def on_startup(bot: Bot):
    global drop_password
    #asyncio.create_task(update_cache())
    await database.init_db()
    message = await redis_connect()
    await send_admin_message(message)
    products = await database.fetch_products("all")
    await cache_products(products)
    user_ids = await database.fetch_users(onlyID=1)
    if not user_ids:
        user_ids = [0]
    await delete_redis_users()
    await upload_users(user_ids)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ redis
    await cache_sizes_length() # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–ª–∏–Ω —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ redis
    with open("bot_settings.json", "r") as f:
        data = json.load(f)
        support = data["support_link"]
        drop_password = data["drop_password"]
    await cache_support_link(support)
    drop_access = await database.fetch_drop_access()
    await cache_drop_access(drop_access)
    await cache_drop_info()
    await send_admin_message(message="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∑–∞–¥–∞—á–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã")
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
dp.startup.register(on_startup)


async def start_handler(message: types.Message, isStart=True, isReboot=False):

    # –°—Ç–∞—Ä—Ç
    user_name = message.from_user.first_name or "–ì–æ—Å—Ç—å"
    if user_name == "Nikix (bot)":
        user_name = "–ì–æ—Å—Ç—å"

    if isReboot == False:
        text = (f'–ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–ë–æ—Ç –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–±–µ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ '
            f'<a href="https://t.me/+cbbL5zcx7jQyOWUy">Nikix.</a> –ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏ –≤ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª, '
            f'–≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –º–æ–¥–µ–ª—å –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –∏ —É–∫–∞–∂–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ–∂–∏–¥–∞–π —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞ '
            f'–¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.\n\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –∫–Ω–æ–ø–∫–µ ¬´–ü–æ–¥–¥–µ—Ä–∂–∫–∞¬ª.')
    else:
        text = f"–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏ ¬´–ö–∞—Ç–∞–ª–æ–≥¬ª –µ—â—ë —Ä–∞–∑"

    support_link = await get_support_link()

    builder = InlineKeyboardBuilder()
    but_catalog = (InlineKeyboardButton(text="üëü –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog"))
    but_search = (InlineKeyboardButton(text="üîé –ü–æ–∏—Å–∫", callback_data="search"))
    # but_feedback = (InlineKeyboardButton(text="üí¨ –û—Ç–∑—ã–≤—ã", callback_data="feedback"))
    but_support = (InlineKeyboardButton(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link))
    but_my_orders = (InlineKeyboardButton(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders:ed"))
    count_basket = await database.fetch_basket(user_id=message.chat.id, count=True)
    if count_basket != None and count_basket > 0:
        but_basket_text = f"üõí –ö–æ—Ä–∑–∏–Ω–∞ [{count_basket}]"
    else:
        but_basket_text = "üõí –ö–æ—Ä–∑–∏–Ω–∞"
    but_basket = (InlineKeyboardButton(text=but_basket_text, callback_data="go_to_basket_from_menu"))
    builder.row(but_catalog)
    builder.row(but_search, but_support)
    builder.row(but_basket, but_my_orders)
    if message.from_user.id == ADMIN_ID:
        but_admin = InlineKeyboardButton(text="üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin")
        builder.row(but_admin)

    if isStart == True:
        await message.answer(text, parse_mode="HTML", disable_web_page_preview=True, reply_markup=builder.as_markup())
    else:
        await bot.edit_message_text(
            text,
            chat_id=message.chat.id,
            message_id=message.message_id,
            parse_mode="HTML",
            disable_web_page_preview=True,
            reply_markup=builder.as_markup()
        )

class adminStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_mail_photo = State()
    waiting_for_mail_text = State()
    waiting_for_mail_but_text = State()
    waiting_for_csv_file = State()
    waiting_for_photos_csv_file = State()
    waiting_for_new_price = State()
    waiting_for_post_link = State()
    waiting_for_sizes_length = State()
    waiting_for_new_proxy = State()
    waiting_for_new_support = State()
    waiting_for_drop_password = State()
    waiting_for_drop_start_date = State()
    waiting_for_drop_stop_date = State()

@dp.message(Command(commands=["start"], ignore_case=True))
async def start(message: types.Message, command: types.BotCommand, state: FSMContext):
    arg = command.args
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–µ—Ü —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Å—Å—ã–ª–æ–∫ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    if (arg is not None) and ("art" in arg):
        # deep link –∏–∑ –∫–∞–Ω–∞–ª–∞
        await start_check_user(message)
        art = arg.split("art")[1]
        watch_mode = "catalog"
        brand = "all"
        back_mode = "0"
        products = await get_products_from_index(watch_mode=watch_mode, brand=brand)
        i = 0
        flag = 0
        for product in products:
            if product["art"] == art:
                flag = 1
                current_index = i
                await upload_user_index_brand(user_id=message.from_user.id, current_index=current_index, brand=brand,
                                              watch_mode=watch_mode, back_mode=back_mode)
                await send_or_update_product(message.chat.id, message.message_id, product, current_index, len(products),
                                             is_edit=False, back_mode=back_mode)
            i += 1
        if flag == 0:
            # –ï—Å–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞—à–µ–ª—Å—è —Ç–æ –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å—Ç–∞—Ä—Ç –∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–∞–ª–µ–º
            await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    elif (arg is not None) and ("zov" in arg):
        data_arg = arg.split("zov")
        arg = data_arg[0]
        last_message_id = data_arg[1]
        back_mode = data_arg[2]
        basket_id_to_delete = int(data_arg[3])
        await state.update_data(basket_id_to_delete=basket_id_to_delete)
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
        products = await get_products_from_index(watch_mode="catalog", brand="all")
        i = 0
        flag = 0
        for product in products:
            if product["art"] == arg:
                flag = 1
                current_index = i
                await send_or_update_product(message.chat.id, message.message_id, product, current_index, len(products),
                                             is_edit=False, back_mode=back_mode)
            i += 1
        if flag == 0:
            await start_handler(message)
    elif (arg is not None) and ("show_order" in arg):
        data_arg = arg.split("show_order")
        order_id = data_arg[0]
        last_message_id = data_arg[1]
        await show_order(message, order_id, last_message_id)
        return
    elif (arg is not None) and ("admin_send" in arg):
        user_id = int(arg.replace("admin_send_", ""))
        if message.from_user.id == ADMIN_ID:
            builder = InlineKeyboardBuilder()
            builder.button(text="–û—Ç–º–µ–Ω–∞", callback_data="admin_send:0")
            await bot.delete_message(chat_id=ADMIN_ID, message_id=message.message_id)
            new_message = await bot.send_message(text=f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {user_id}:", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
            await state.update_data(last_message_id=new_message.message_id, user_id_for_admin=user_id)
            await state.set_state(adminStates.waiting_for_message)
        else:
            await message.answer(text="–¢—ã –Ω–µ –∞–¥–º–∏–Ω", show_alert=True)
        return
    elif (arg is not None) and ("photos" in arg):
        await show_all_photos(arg, message, state)
        return
    elif arg == "-1":
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await start_handler(message)
    elif (arg is not None) and ("status" in arg):
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        if message.chat.id == ADMIN_ID:
            await choose_status(message, arg)
        else:
            await message.answer(text="–¢—ã –Ω–µ –∞–¥–º–∏–Ω", show_alert=True)
        return
    else:
        await start_check_user(message)
        await start_handler(message)

async def start_check_user(message):
    user_id = message.from_user.id
    username = message.from_user.username
    if username:
        username = f"@{username}"
    else:
        username = "–ù–µ —É–∫–∞–∑–∞–Ω"
    is_user_exist = await check_and_add_user(user_id)
    if is_user_exist is None:
        users = await database.fetch_users(onlyID=1)
        if user_id in users:
            is_user_exist = 1
        await upload_users(users)  # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ redis
    if is_user_exist == 0:
        await database.add_user(user_id=user_id, user_name=username, first_name=message.from_user.first_name)
        newuser_text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} —Å id: {user_id} —Ç–µ–ø–µ—Ä—å —Å –Ω–∞–º–∏!"
        await send_admin_message(message=newuser_text)


@dp.callback_query(lambda c: c.data in ['catalog', 'back_from_products'])
async def start_catalog(callback_query: types.CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ redis
    brands = await get_redis_brands()
    brands = [brand.decode('utf-8') for brand in brands]
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not brands:
        brands = await database.fetch_brands()
    if not brands:
        await callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤")
        await send_admin_message("–ù–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Ç–æ–≤–∞—Ä—ã")
        return

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="–í—Å–µ –±—Ä–µ–Ω–¥—ã", callback_data="brand:all"))
    # builder.adjust(1)  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(brands), 3):
        but1 = InlineKeyboardButton(text=brands[i], callback_data=f"brand:{brands[i]}")
        if i < len(brands) - 2:
            but2 = InlineKeyboardButton(text=brands[i+1], callback_data=f"brand:{brands[i+1]}")
            but3 = InlineKeyboardButton(text=brands[i + 2], callback_data=f"brand:{brands[i + 2]}")
            builder.row(but1, but2, but3)
        elif i < len(brands) - 1:
            but2 = InlineKeyboardButton(text=brands[i + 1], callback_data=f"brand:{brands[i + 1]}")
            builder.row(but1, but2)
        else:
            builder.row(but1)
    builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –≤ –º–µ–Ω—é", callback_data="catalog_back"))
    # builder.adjust(1)

    text = "–í—ã–±–µ—Ä–∏ –±—Ä–µ–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫—Ä–æ—Å—Å–æ–≤–æ–∫:"

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        await bot.edit_message_text(
            text=text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        await bot.send_message(
            chat_id=callback_query.message.chat.id,
            text=text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –æ—á–∏—â–∞–µ–º state
    await state.clear()



@dp.callback_query(lambda c: c.data == 'catalog_back')
async def back_from_catalog(callback_query: types.CallbackQuery):
    await start_handler(message=callback_query.message, isStart=False)



#–ö–æ–ª–±—ç–∫, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å brand_:
@dp.callback_query(lambda c: c.data.startswith('brand:'))
async def show_products(callback_query: types.CallbackQuery):
    callback_data = callback_query.data.split(":")
    brand = callback_data[1]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –∫–æ–ª–±—ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—Ä–µ–Ω–¥–∞ –∏–ª–∏ all
    products = await get_cached_products(brand)
    if products == [] or products is None:
        products_from_brand = await database.fetch_products(brand)
        products = products_from_brand[::-1]
    await upload_user_index_brand(user_id=callback_query.from_user.id, current_index=0, brand=brand, watch_mode="catalog", back_mode="0")
    if len(callback_data) > 2:
        if callback_data[2] == "from_mail":
            await send_or_update_product(callback_query.message.chat.id, callback_query.message.message_id, products[0], 0, len(products), is_edit=False)
            return
    await send_or_update_product(callback_query.message.chat.id, callback_query.message.message_id, products[0], 0,len(products), is_edit=True)



@dp.callback_query(lambda c: c.data in ['prev', 'next', 'same', 'same2'])
async def navigate_catalog(callback_query: types.CallbackQuery, state: FSMContext):
    index = await get_brand_and_index(callback_query.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    total_products = len(products)

    if products == []:
        await start_handler(callback_query.message, isStart=False)
        return

    if callback_query.data == 'prev':
        if current_index > 0:
            current_index -= 1
        else:
            current_index = total_products-1
    elif callback_query.data == 'next':
        if current_index < total_products-1:
            current_index += 1
        else:
            current_index = 0

    await upload_user_index_brand(callback_query.from_user.id, current_index, brand, watch_mode, back_mode)
    await send_or_update_product(callback_query.message.chat.id, callback_query.message.message_id, products[current_index], current_index, total_products, is_edit=True, back_mode=back_mode)
    if callback_query.data == "same2":
        await state.clear()



async def get_products_from_index(watch_mode, brand):
    if watch_mode == "catalog":
        products = await get_cached_products(brand)
    elif "search" in watch_mode:
        search_data = watch_mode.split(":")
        search_mode = search_data[1]
        param = search_data[2]
        param2 = None
        if "size" in watch_mode:
            global sizes_cache
            param2 = sizes_cache
        products = await get_search_products(search_mode=search_mode, param=param, sizes_cache=param2)
    return products



async def create_navigative_keyboard(is_has, back_mode, is_one, is_admin, is_drop_close):
    keyboard = InlineKeyboardBuilder()
    if (back_mode == "0") or (back_mode == None) or ("search_from" in back_mode):
        if is_one == False:
            keyboard.button(text="‚¨ÖÔ∏è", callback_data="prev")
            keyboard.button(text="‚û°Ô∏è", callback_data="next")
        if is_admin == False:
            if not is_drop_close:
                if is_has == 1:
                    keyboard.button(text="üì¶ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="choose_size:for_order")
                    keyboard.button(text="üõí –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="choose_size:for_basket")
                else:
                    keyboard.button(text="‚úñÔ∏è –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="popup_empty")
                    keyboard.button(text="‚úñÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="popup_empty")
            else:
                keyboard.button(text="üßë‚Äçüíª –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å", callback_data="enter_drop_password")
        else:
            keyboard.button(text="üíµ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="change_price")
            keyboard.button(text="üñº –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç", callback_data="change_post_link")
            keyboard.button(text="üóë –£–¥–∞–ª–∏—Ç—å", callback_data="admin_delete_product")
    if back_mode == "0"  or back_mode == None:
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_from_products")
        if is_one == False:
            keyboard.adjust(2, 1, 1, 1)
        else:
            keyboard.adjust(1)
    elif "search" in back_mode:
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_mode)
        if is_one == False:
            keyboard.adjust(2, 1, 1, 1)
        else:
            keyboard.adjust(1)
    else:
        keyboard.button(text="üìè –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä", callback_data=f"choose_size:for_edit_basket:{back_mode}")
        keyboard.button(text="‚ùå –£–±—Ä–∞—Ç—å –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data=f"delete_product_basket:{back_mode}")
        keyboard.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=back_mode)
        keyboard.adjust(1) # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–Ω–æ–ø–æ–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    return keyboard.as_markup()



#–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–±–µ–ª—ã –≤ —á–∏—Å–ª–∞—Ö
async def format_number(number):
    return f"{number:,}".replace(',', ' ')

async def send_or_update_product(chat_id, message_id, product, current_index, total_products, is_edit=False, back_mode="0"):
    # –†–∞–±–æ—Ç–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏
    global sizes_cache
    if product["art"] in sizes_cache:
        sizes = sizes_cache[str(product["art"])]
    else:
        sizes = []
    if len(sizes) != 0:
        size_text = ""
        is_has = 1
    else:
        size_text = "–î–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ –Ω–µ—Ç"
        is_has = 0
    for size in sizes:
        if len(size_text) == 0:
            size_text += f"–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã (EU): {size}" # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –±–µ–∑ –∑–∞–ø—è—Ç–æ–π
        else:
            size_text += f", {size}"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ —á—Ç–æ —Ç–æ–≤–∞—Ä –Ω–µ –∏–∑ –¥—Ä–æ–ø–∞
    if product["is_drop"] == "0":
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–æ–¥–∏–º –∫–∞ –æ–±—ã—á–Ω–æ
        product_text = (
            f"{current_index + 1} –∏–∑ {total_products}\n"
            f"<b>{product['name']}</b>\n"
            f"–ê—Ä—Ç–∏–∫—É–ª: {product['art']}\n"
            # f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product['maker']}\n" –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–∫–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–æ–∏—Ç none
            f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {product['material']}\n"
            f"–°–µ–∑–æ–Ω: {product['season']}\n\n"
        )
        if is_has == 1:
            if product["price"] != 0:
                price = await format_number(product["price"])
                product_text += f"–¶–µ–Ω–∞: <b>{price}</b> ‚ÇΩ\n"
            else:
                await send_admin_message(message=f"–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ {product['name']}, –∞—Ä—Ç–∏–∫—É–ª: {product['art']}")
                product_text += f"–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
        product_text += f"{size_text}\n"
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∑–Ω–∞—á–∏—Ç —Ç–∞–º —Å—Ç–æ–∏—Ç 0)
        if product["channel_url"] != "0":
            photos_link = product["channel_url"]
        else:
            # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç —Å—É–µ–º –∞—Ä—Ç–∏–∫—É–ª
            photos_link = f"https://t.me/nikix_store_bot?start={product['art']}photos{message_id}"
        product_text += f"<a href='{photos_link}'>–ï—â—ë —Ñ–æ—Ç–æ...</a>"
        is_drop_close = False
    else:
        # –ï—Å–ª–∏ –∏–∑ –¥—Ä–æ–ø–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–≤–µ–¥—ë–Ω –ª–∏ –ø–∞—Ä–æ–ª—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        drop_info = await get_drop_info()
        drop_access = await get_drop_access(chat_id)
        if (drop_access == "0") or (drop_access is None):
            product_text = f"–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –∫–ª—é—á-–ø–∞—Ä–æ–ª—å. –û–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ –≤ <b>{drop_info['drop_start_date']}</b>"
            is_drop_close = True
        else:
            # –ï—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω, —Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            is_drop_close = False
            product_text = (
                f"{current_index + 1} –∏–∑ {total_products}\n"
                f"<b>{product['name']}</b>\n"
                f"–ê—Ä—Ç–∏–∫—É–ª: {product['art']}\n"
                # f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {product['maker']}\n" –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫—Ä–æ—Å—Å–æ–≤–∫–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å —Å—Ç–æ–∏—Ç none
                f"–ú–∞—Ç–µ—Ä–∏–∞–ª: {product['material']}\n"
                f"–°–µ–∑–æ–Ω: {product['season']}\n\n"
            )
            if is_has == 1:
                if (product["drop_price"] != 0) and (product["price"] !=0):
                    old_price = await format_number(product["price"])
                    new_price = await format_number(product["drop_price"])
                    price = f"<s>{old_price} ‚ÇΩ</s> <b>{new_price}</b> ‚ÇΩ"
                    product_text += f"–¶–µ–Ω–∞: {price}\n"
                else:
                    await send_admin_message(message=f"–ù–µ —É–∫–∞–∑–∞–Ω–∞ —Ü–µ–Ω–∞ –Ω–∞ {product['name']}, –∞—Ä—Ç–∏–∫—É–ª: {product['art']}")
                    product_text += f"–¶–µ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É\n"
            product_text += f"{size_text}\n"
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç (–µ—Å–ª–∏ –µ—ë –Ω–µ—Ç –∑–Ω–∞—á–∏—Ç —Ç–∞–º —Å—Ç–æ–∏—Ç 0)
            if product["channel_url"] != "0":
                photos_link = product["channel_url"]
            else:
                # –ï—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –Ω–µ—Ç –¥–µ–ª–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏ –≤ –∞—Ä–≥—É–º–µ–Ω—Ç —Å—É–µ–º –∞—Ä—Ç–∏–∫—É–ª
                photos_link = f"https://t.me/nikix_store_bot?start={product['art']}photos{message_id}"
            product_text += f"<a href='{photos_link}'>–ï—â—ë —Ñ–æ—Ç–æ...</a>"
            product_text += f"\n\n–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –¥—Ä–æ–ø–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ <b>{drop_info['drop_stop_date']}</b>"

    is_one = False
    if total_products == 1:
        is_one = True
    if chat_id == ADMIN_ID:
        is_admin = True
    else:
        is_admin = False
    keyboard = await create_navigative_keyboard(is_has=is_has, back_mode=back_mode, is_one=is_one, is_admin=is_admin, is_drop_close=is_drop_close)
    photo_url = product["photo_url"]
    photo_url = photo_url.strip()

    if is_edit:
        if message_id is None:
            logger.error("–û—à–∏–±–∫–∞, message_id –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω")
            return

        await bot.edit_message_media(
            media = types.InputMediaPhoto(media=photo_url, caption=product_text, parse_mode="HTML"),
            chat_id = chat_id,
            message_id = message_id,
            reply_markup = keyboard
        )
    else:
        await bot.send_photo(chat_id, photo=photo_url, caption=product_text, parse_mode="HTML", reply_markup=keyboard)


@dp.callback_query(lambda c: c.data == "popup_empty")
async def show_popup_empty(callback: types.CallbackQuery):
    await callback.answer(text="–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏", show_alert=True)


class dropStates(StatesGroup):
    waiting_for_drop_password = State()

# –í–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥—Ä–æ–ø–∞
@dp.callback_query(lambda c: c.data == "enter_drop_password")
async def ack_drop_password(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="same2")
    new_message = await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–ù–∞–ø–∏—à–∏ –∫–æ–¥-–ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä–æ–ø—É:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(dropStates.waiting_for_drop_password)
    await state.update_data(last_message_id=new_message.message_id)

@dp.message(dropStates.waiting_for_drop_password)
async def check_drop_password(message: types.Message, state: FSMContext):
    global drop_password
    user_password = message.text.strip()
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    if user_password == drop_password:
        await database.give_drop_access_to_user(message.from_user.id)
        await give_redis_drop_access(message.from_user.id)
        text = "‚úÖ –ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω —É—Å–ø–µ—à–Ω–æ.\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥—Ä–æ–ø—É."
        builder.button(text="–•–æ—Ä–æ—à–æ", callback_data="same2")
    else:
        text = "‚ùå –ü–∞—Ä–æ–ª—å –Ω–µ –≤–µ—Ä–Ω—ã–π. –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–≤–µ—Å—Ç–∏ –µ—â—ë —Ä–∞–∑:"
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="same2")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.delete_message(chat_id=message.chat.id, message_id=last_message_id)
    new_message = await bot.send_message(
        chat_id=message.chat.id,
        text=text,
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_message_id=new_message.message_id)



@dp.callback_query(lambda c: c.data.startswith("choose_size:"))
async def choose_size_for_add_basket(callback_query: types.CallbackQuery):
    index = await get_brand_and_index(callback_query.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    if products == []:
        await start_handler(message=callback_query.message, isStart=True, isReboot=True)
        return
    product = products[current_index]
    if not products:
        await callback_query.answer("–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞")
        return
    photo_url = product["photo_url"]

    global sizes_cache
    sizes = sizes_cache[product["art"]]

    builder = InlineKeyboardBuilder()

    callback_data = callback_query.data.split(":")[1]
    if callback_data == "for_basket":
        text = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä (EU) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
        for size in sizes:
            builder.button(text=size, callback_data=f"add_in_basket:{size}:normal")
        #buttons = [InlineKeyboardButton(text=size, callback_data=f"add_in_basket:{size}:normal") for size in sizes]
    elif callback_data == "for_order":
        text = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä (EU) –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
        for size in sizes:
            builder.button(text=size, callback_data=f"buy_from_catalog:{size}")
        #buttons = [InlineKeyboardButton(text=size, callback_data=f"buy_from_catalog:{size}") for size in sizes]
    elif callback_data == "for_edit_basket":
        text = "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (EU):"
        back_mode = callback_query.data.split(":")[2]
        for size in sizes:
            builder.button(text=size, callback_data=f"add_in_basket:{size}:change:{back_mode}")
        #buttons = [InlineKeyboardButton(text=size, callback_data=f"add_in_basket:{size}:change:{back_mode}") for size in sizes]

    #builder.row(*buttons)
    builder.adjust(3)
    builder.row(InlineKeyboardButton(text="üìè –í—ã–±—Ä–∞—Ç—å –≤ –º–º", callback_data=f"mm{callback_query.data}"))
    if callback_data != "for_edit_basket":
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="same"))
    else:
        arg = f"{product['art']}from_basket{callback_query.message.message_id}from_basket{back_mode}"
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", url=f"https://t.me/nikix_store_bot?start={arg}"))

    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=photo_url, caption=text, parse_mode="HTML"),
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=builder.as_markup()
    )



@dp.callback_query(lambda c: c.data.startswith("mm"))
async def choose_size_mm(callback_query: types.CallbackQuery):
    index = await get_brand_and_index(callback_query.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    if products == []:
        await start_handler(message=callback_query.message, isStart=True, isReboot=True)
        return
    product = products[current_index]
    if not products:
        await callback_query.answer("–û—à–∏–±–∫–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞")
        return
    photo_url = product["photo_url"]

    global sizes_cache
    sizes = sizes_cache[product["art"]]
    builder = InlineKeyboardBuilder()
    callback_data = callback_query.data.split(":")[1]

    sizes_length = await get_sizes_length(product["art"])
    if callback_data == "for_basket":
        text = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä (–º–º) –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:"
        for size in sizes:
            builder.button(text=sizes_length[str(size)], callback_data=f"add_in_basket:{size}:normal")
        # buttons = [InlineKeyboardButton(text=size, callback_data=f"add_in_basket:{size}:normal") for size in sizes]
    elif callback_data == "for_order":
        text = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä (–º–º) –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
        for size in sizes:
            builder.button(text=sizes_length[str(size)], callback_data=f"buy_from_catalog:{size}")
        # buttons = [InlineKeyboardButton(text=size, callback_data=f"buy_from_catalog:{size}") for size in sizes]
    elif callback_data == "for_edit_basket":
        text = "–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä (–º–º):"
        back_mode = callback_query.data.split(":")[2]
        for size in sizes:
            builder.button(text=sizes_length[str(size)], callback_data=f"add_in_basket:{size}:change:{back_mode}")
        # buttons = [InlineKeyboardButton(text=size, callback_data=f"add_in_basket:{size}:change:{back_mode}") for size in sizes]

    # builder.row(*buttons)
    builder.adjust(3) 
    builder.row(InlineKeyboardButton(text="üìè –í—ã–±—Ä–∞—Ç—å –≤ EU", callback_data=callback_query.data.split("mm")[1]))
    if callback_data != "for_edit_basket":
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="same"))
    else:
        arg = f"{product['art']}from_basket{callback_query.message.message_id}from_basket{back_mode}"
        builder.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", url=f"https://t.me/nikix_store_bot?start={arg}"))

    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=photo_url, caption=text, parse_mode="HTML"),
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=builder.as_markup()
    )



@dp.callback_query(lambda c: c.data.startswith("add_in_basket"))
async def add_in_basket_product(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    index = await get_brand_and_index(user_id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    product = products[current_index]

    callback_data = callback_query.data.split(":")
    size = callback_data[1]
    product_name = product["name"]
    photo_url = product["photo_url"]

    await database.add_to_basket(user_id=user_id, art=product["art"], size=size)
    await callback_query.answer("–ö—Ä–æ—Å—Å–æ–≤–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ—Ä–∑–∏–Ω—É")

    builder = InlineKeyboardBuilder()
    if callback_data[2] == "normal":
        text = f"‚úÖ <b>{product_name}</b> {size}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É"
        builder.button(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="go_to_basket_from_catalog")
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="same")
        builder.adjust(1)
    else:
        data = await state.get_data()
        back_mode = callback_data[3]
        basket_id_to_delete = data.get("basket_id_to_delete")
        text = f"‚úÖ –†–∞–∑–º–µ—Ä <b>{product_name}</b> –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {size}"
        builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=back_mode)
        await database.clear_basket(user_id=user_id, basket_id=basket_id_to_delete, is_all=0)

    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=photo_url, caption=text, parse_mode="HTML"),
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=builder.as_markup()
    )
    logger.info(f"@{callback_query.from_user.username} –¥–æ–±–∞–≤–∏–ª —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É")



@dp.callback_query(lambda c: c.data in ["go_to_basket_from_catalog", "go_to_basket_from_menu"])
async def go_to_basket_callback(callback: types.CallbackQuery, state: FSMContext):
    await go_to_basket(callback, state)

async def go_to_basket(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    basket = await database.fetch_basket(user_id)
    back_mode = callback_query.data
    index = await get_brand_and_index(callback_query.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode_prob = index["back_mode"]
    if (back_mode_prob == "0") or ("search" in back_mode_prob):
        await upload_user_index_brand(user_id=user_id, current_index=current_index, brand=brand, watch_mode=watch_mode,
                                      back_mode=back_mode_prob)
        # –ï—Å–ª–∏ –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–æ–∏—Å–∫–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º back_mode –≤ state, —Ç–∞–∫ –∫–∞–∫ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∫–æ—Ä–∑–∏–Ω—ã –æ–Ω –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è
        await state.update_data(basket_back_mode=back_mode_prob)
    else:
        # –ï—Å–ª–∏ –∂–µ –º—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–∞, —Ç–æ –±–µ—Ä–µ–º –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π back_mode –∏–∑ state, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤ redis —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–Ω—ã–π (–¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É)
        data = await state.get_data()
        basket_back_mode = data.get("basket_back_mode")
        await upload_user_index_brand(user_id=user_id, current_index=current_index, brand=brand, watch_mode=watch_mode,
                                      back_mode=basket_back_mode)
    builder = InlineKeyboardBuilder()

    flag = 0
    if basket:
        total_price_int = 0
        text = "<b>üõí –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        i = 1
        for item in basket:
            # price = await format_number(item["price"])
            sizes_length = await get_sizes_length(item["art"])
            if item['size'] in sizes_length:
                mm = f" ({sizes_length[(item['size'])]} –º–º)"
            else:
                mm = ""
            arg = f"{item["art"]}zov{callback_query.message.message_id}zov{back_mode}zov{item['basket_id']}"
            if item["is_drop"] == 0:
                price = item["price"]
            else:
                price = item["drop_price"]
            total_price_int += price
            price = await format_number(price)
            text += (
                f"{i}. <a href='https://t.me/nikix_store_bot?start={arg}'><b>{item['name']}</b></a>\n"
                f"–†–∞–∑–º–µ—Ä: {item['size']} EU {mm}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
            )
            i += 1
        total_price = await format_number(total_price_int)
        text += f"–í—Å–µ–≥–æ: <b>{total_price}</b> ‚ÇΩ\n"
        text += f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"

        builder.button(text="üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"buy_from_basket:{back_mode}")
        builder.button(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"clear_basket:{back_mode}")
    else:
        text = "–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
        builder.button(text="üëü –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_start")
        flag = 1

    if callback_query.data == "go_to_basket_from_catalog" and flag == 0:
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="same")
        back_mode = "go_to_basket_from_catalog"
    elif callback_query.data == "go_to_basket_from_menu" and flag == 0:
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_start")
        back_mode = "go_to_basket_from_menu"
    builder.adjust(1)

    try:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç
        await bot.edit_message_text(
            text=text,
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
        await bot.delete_message(
            chat_id=callback_query.message.chat.id,
            message_id=callback_query.message.message_id
        )
        new_message = await bot.send_message(chat_id=callback_query.message.chat.id, text="–ö–æ—Ä–∑–∏–Ω–∞")

        text = "<b>üõí –¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        i = 1
        for item in basket:
            if item["is_drop"] == 0:
                price = item["price"]
            else:
                price = item["drop_price"]
            price = await format_number(price)
            sizes_length = await get_sizes_length(item["art"])
            if item['size'] in sizes_length:
                mm = f" ({sizes_length[(item['size'])]} –º–º)"
            else:
                mm = ""
            arg = f"{item["art"]}zov{new_message.message_id}zov{back_mode}zov{item['basket_id']}"
            text += (
                f"{i}. <a href='https://t.me/nikix_store_bot?start={arg}'><b>{item['name']}</b></a>\n"
                f"–†–∞–∑–º–µ—Ä: {item['size']} EU {mm}\n"
                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {price} ‚ÇΩ\n\n"
            )
            i += 1
        text += f"–í—Å–µ–≥–æ: <b>{total_price}</b> ‚ÇΩ\n"
        text += f"–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:"

        await bot.edit_message_text(
            chat_id=callback_query.message.chat.id,
            message_id=new_message.message_id ,
            text=text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )



@dp.callback_query(lambda c: c.data == "back_to_start")
async def back_to_start_(callback_query: types.CallbackQuery):
    await start_handler(callback_query.message, isStart=False)



@dp.callback_query(lambda c: c.data.startswith("clear_basket:"))
async def clear_basket_to_user(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await database.clear_basket(user_id=user_id, basket_id=0, is_all=1)

    back_mode = callback_query.data.split(":")[1]
    text = "üßπ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞"
    builder = InlineKeyboardBuilder()
    if back_mode == "go_to_basket_from_catalog":
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="same")
    elif back_mode == "go_to_basket_from_menu":
        builder.button(text="üëü –í –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")
        builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_start")
        builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )



@dp.callback_query(lambda c: c.data.startswith("delete_product_basket:"))
async def delete_product_basket(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = callback.data.split(":")
    back_mode = data[1]
    data = await state.get_data()
    basket_id = data.get("basket_id_to_delete")
    await database.clear_basket(user_id=user_id, basket_id=basket_id, is_all=0)
    text = "–ü–∞—Ä–∞ —É–±—Ä–∞–Ω–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"
    builder = InlineKeyboardBuilder()
    builder.button(text="–ì–æ—Ç–æ–≤–æ", callback_data=back_mode)
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
    await bot.send_message(
        text=text,
        chat_id=callback.message.chat.id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    #await show_basket_settings(callback=callback)



# *************************************************************************************************************
# *************************************************************************************************************
# –ú–æ–∏ –∑–∞–∫–∞–∑—ã
@dp.callback_query(lambda c: c.data.startswith("my_orders"))
async def show_my_orders(callback: types.CallbackQuery):
    mode = callback.data.split(":")[1]
    if mode == "sd":
        new_message = await bot.send_message(text="–ú–æ–∏ –∑–∞–∫–∞–∑—ã", chat_id=callback.message.chat.id)
        message_id = new_message.message_id
    else:
        message_id = callback.message.message_id
    user_id = callback.from_user.id
    orders = await database.fetch_orders(user_id)
    orders = orders[::-1]
    builder = InlineKeyboardBuilder()
    if orders:
        text = "üì¶ <b>–¢–≤–æ–∏ –∑–∞–∫–∞–∑—ã:</b>\n(–ù–∞–∂–º–∏ –Ω–∞ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω—ë–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ)\n\n"
        for order in orders:
            arg = f"{order['id']}show_order{message_id}"
            try:
                status = await decrypt_status(int(order["status"]))
            except Exception:
                status = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Å—Ç–∞—Ç—É—Å: {order['id']}")
                await send_admin_message(f"–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω —Å—Ç–∞—Ç—É—Å: {order['id']}")
            text += (f"<a href='https://t.me/nikix_store_bot?start={arg}'><b>‚Ññ{order['id']}</b></a>\n"
                     f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n")
    else:
        text = "–£ —Ç–µ–±—è –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
    support_link = await get_support_link()
    builder.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link)
    builder.button(text="‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="catalog_back")
    builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=message_id,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=builder.as_markup()
    )


async def show_order(message, order_id, last_message_id):
    id = int(order_id) - 2000
    orders = await database.fetch_orders(user_id=message.chat.id, id=id)
    order = orders[0]
    status = await decrypt_status(int(order["status"]))
    text = (f"–ó–∞–∫–∞–∑ ‚Ññ<b>{order_id}</b>\n"
            f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
            f"üöö <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['delivery_way']}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {order['address']}\n"
            f"üëü <b>–ü—Ä–∏–º–µ—Ä–∫–∞:</b> {order['preview']}\n"
            f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order['pay_way']}\n"
            f"üë§ <b>–§–ò–û:</b> {order['fio']}\n"
            f"‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {order['phone']}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b> {order['comment']}\n\n")

    total_price = 0
    i = 1
    for product in order["products"]:
        price = await format_number(product['price'])
        total_price += product['price']
        sizes_length = await get_sizes_length(product["art"])
        text += (f"{i}. <a href='{product['channel_url']}'><b>{product['name']}</b></a>\n"
                 f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product['art']}\n"
                 f"<b>–†–∞–∑–º–µ—Ä:</b> {product['size']} (EU) ({sizes_length[product['size']]} –º–º)\n"
                 f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ\n\n")
        i += 1

    total_price += order["delivery_price"]
    total_price = await format_number(total_price)
    text += (f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order["delivery_price"]} ‚ÇΩ\n"
             f"<b>–í—Å–µ–≥–æ:</b> {total_price} ‚ÇΩ")

    builder = InlineKeyboardBuilder()
    support_link = await get_support_link()
    builder.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link)
    if order["status"] == '0':
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"sure_cancel:{id}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="my_orders:ed")
    builder.adjust(1)

    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=text,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("sure_cancel"))
async def sure_to_cancel(callback: types.CallbackQuery):
    id = callback.data.split(":")[1]
    text = f"–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ #{int(id) + 2000}?"
    builder = InlineKeyboardBuilder()
    builder.button(text="–ù–µ—Ç", callback_data="my_orders:ed")
    builder.button(text="–î–∞", callback_data=f"cancel_order:{id}")
    builder.adjust(2)
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("cancel_order"))
async def cancel_to_order(callback: types.CallbackQuery):
    order_id = int(callback.data.split(":")[1]) + 2000
    callback_data = f"set_order_status:4:{order_id}"
    await change_status(callback_data, 0)
    text = f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–º–µ–Ω—ë–Ω"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–û–∫", callback_data="my_orders:ed")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )


# ***************************************************************************************************************
# ********************************–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞: –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏ –∫–∞—Ç–∞–ª–æ–≥–∞***************************************
class OrderState(StatesGroup):
    waiting_for_client_fio = State()
    waiting_for_client_address = State()
    waiting_for_client_phone = State()
    waiting_for_client_comment = State()
    waiting_none = State()



@dp.callback_query(lambda c: c.data.startswith("buy_from_catalog") or c.data.startswith("buy_from_basket"))
async def buy(callback: types.CallbackQuery, state: FSMContext):
    global sizes_cache
    user_id = callback.from_user.id
    callback_data = callback.data.split(":")
    callback_mode = callback_data[0]
    back_mode = callback_data[1]

    if callback_mode == "buy_from_basket":
        basket = await database.fetch_basket(user_id=user_id)
        await state.update_data(last_message_id=callback.message.message_id, back_mode=back_mode, buy_from="b")
        error_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å —É –Ω–∞—Å –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏ "
        flag = 0
        for item in basket:
            if item["size"] not in sizes_cache[item["art"]]:
                flag = 1
                error_text += f"<a href='{item['channel_url']}'>{item['name']}</a> {item['size']}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                await database.clear_basket(user_id=user_id, basket_id=item["basket_id"], is_all=0)
        if flag == 1:
            builder = InlineKeyboardBuilder()
            count = await database.fetch_basket(user_id=user_id, count=True)
            if count != 0:
                builder.button(text="üì¶ –í—Å—ë —Ä–∞–≤–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order_anyway:{back_mode}")
            builder.button(text="üëü –ù–∞–π—Ç–∏ –∑–∞–º–µ–Ω—É", callback_data="catalog")
            builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=back_mode)
            builder.adjust(1)
            await bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text=error_text,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=builder.as_markup()
            )
        else:
            await buy2(callback, state)
    else:
        await buy2(callback, state)
        await state.update_data(buy_from="c")
    await send_admin_message(f"@{callback.from_user.username} (id: {user_id}) –Ω–∞—á–∞–ª –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑")

@dp.callback_query(lambda c: c.data.startswith("order_anyway"))
async def let_buy2(callback: types.CallbackQuery, state: FSMContext):
    await buy2(callback, state)



async def buy2(callback, state):
    callback_data = callback.data.split(":")
    mode = callback_data[0]

    text = "üöö –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:\n(–ü—Ä–∏–º–µ—Ä–∫–∞ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –≤ –°–î–≠–ö)"
    builder = InlineKeyboardBuilder()

    if mode == "buy_from_catalog":
        size = callback_data[1]
        index = await get_brand_and_index(callback.from_user.id)
        brand = index["brand"]
        current_index = int(index["current_index"])
        watch_mode = index["watch_mode"]
        products = await get_products_from_index(watch_mode, brand)
        product = products[current_index]
        if products == []:
            await start_handler(message=callback.message, isStart=True, isReboot=True)
            return
        if product["price"] == 0:
            err_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ–±—Ä–∞—Ç–∏—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="–û–∫", callback_data="same")
            await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
            await bot.send_message(chat_id=callback.message.chat.id, text=err_text, reply_markup=keyboard.as_markup())
            return
        if product["is_drop"] == "1":
            product["price"] = product["drop_price"]
        builder.button(text="–°–î–≠–ö", callback_data="cdek")
        builder.button(text="–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data="pochta")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="same")
        builder.adjust(2, 1)
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        new_message = await bot.send_message(text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ...", chat_id=callback.message.chat.id)
        new_message_id = new_message.message_id
        await bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=new_message_id,
            text=text,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
        await state.update_data(product_buy={"product": product, "size": size},last_message_id=new_message_id, back_mode="same")
    else:
        back_mode = callback_data[1]
        builder.button(text="–°–î–≠–ö", callback_data="cdek")
        builder.button(text="–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏", callback_data="pochta")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
        builder.adjust(2, 1)
        await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
        )



@dp.callback_query(lambda c: c.data == "cdek")
async def choose_preview(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    back_mode = data.get("back_mode")
    if back_mode == "same":
        count = 1
        pynct_price = 300
        home_price = 500
    else:
        count = await database.fetch_basket(user_id=callback.from_user.id, count=True)
        pynct_price = 300
        home_price = 500
        for i in range(count-1):
            pynct_price += 150
            home_price += 200
    if count == 1:
        count_text = ""
    elif count <= 4:
        count_text = f" –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ {count} –ø–∞—Ä—ã"
    elif count >= 5:
        count_text = f" –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ —É–∫–∞–∑–∞–Ω–∞ –∑–∞ {count} –ø–∞—Ä"
    text = f"<b>–í—ã–±–µ—Ä–∏ –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏:</b>\n(–î–æ—Å—Ç–∞–≤–∫—É –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å —Ç–∞–∫–∂–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏.{count_text})"
    builder = InlineKeyboardBuilder()
    builder.button(text=f"–í –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–ï–ö ({pynct_price} ‚ÇΩ)", callback_data="pynktCDEK")
    builder.button(text=f"–í –ø–æ—Å—Ç–∞–º–∞—Ç –°–î–ï–ö ({pynct_price} ‚ÇΩ)", callback_data="postCDEK")
    builder.button(text=f"–ö—É—Ä—å–µ—Ä–æ–º –¥–æ –¥–æ–º–∞ ({home_price} ‚ÇΩ)", callback_data="deliver_to_home_CDEK")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data in ["pynktCDEK", "deliver_to_home_CDEK", "postCDEK", "pochta"])
async def enter_address(callback: types.CallbackQuery, state: FSMContext):
    callback_data = callback.data
    builder = InlineKeyboardBuilder()
    if callback_data == "pynktCDEK":
        text = "üè† –ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å <b>–ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –°–î–ï–ö</b> –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏, –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º\n"
        delivery_mode = "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–ï–ö"
        builder.button(text="üó∫ –ù–∞–π—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url="https://yandex.ru/maps/?mode=search&text=CDEK")
    elif callback_data == "deliver_to_home_CDEK":
        text = "üè† –ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –∫—É–¥–∞ –∫—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞"
        delivery_mode = "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –°–î–ï–ö"
    elif callback_data == "postCDEK":
        text = "üè† –ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–º–∞—Ç–∞ –°–î–ï–ö –∫—É–¥–∞ –¥–æ—Å—Ç–∞–≤–∏—Ç—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º\n"
        delivery_mode = "–ü–æ—Å—Ç–∞–º–∞—Ç –°–î–ï–ö"
        builder.button(text="üó∫ –ù–∞–π—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url="https://yandex.ru/maps/?mode=search&text=CDEK")
    elif callback_data == "pochta":
        text = "üè† –ù–∞–ø–∏—à–∏ –∞–¥—Ä–µ—Å –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—á—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ò–Ω–¥–µ–∫—Å, –≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n(–ò–Ω–¥–µ–∫—Å –±–ª–∏–∂–∞–π—à–µ–π –ø–æ—á—Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∞—Ä—Ç–∞—Ö üëá)"
        delivery_mode = "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"
        builder.button(text=" üó∫ –ù–∞–π—Ç–∏ –≤ –Ø–Ω–¥–µ–∫—Å –ö–∞—Ä—Ç–∞—Ö", url="https://yandex.ru/maps/?mode=search&text=%D0%9F%D0%BE%D1%87%D1%82%D0%B0%D0%A0%D0%BE%D1%81%D1%81%D0%B8%D0%B8")
    data = await state.get_data()
    if not data:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ", show_alert=True)
        return
    back_mode = data.get("back_mode")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(delivery_mode=delivery_mode, last_message_id=callback.message.message_id)
    await state.set_state(OrderState.waiting_for_client_address)

@dp.message(OrderState.waiting_for_client_address)
async def is_preview(message: types.Message, state: FSMContext):
    address = str(message.text)
    await state.update_data(address=address)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    delivery_mode = data.get("delivery_mode")
    back_mode = data.get("back_mode")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    if delivery_mode in ["–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–ï–ö", "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –°–î–ï–ö"]:
        text = "üëü –ù—É–∂–Ω–∞ –ª–∏ –ø—Ä–∏–º–µ—Ä–∫–∞?"
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úî–î–∞", callback_data="preview_yes")
        builder.button(text="‚úñ–ù–µ—Ç", callback_data="preview_no")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
        builder.adjust(2, 1)
        await bot.edit_message_text(
            text=text,
            chat_id=message.chat.id,
            message_id=last_message_id,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )
    elif delivery_mode == "–ü–æ—Å—Ç–∞–º–∞—Ç –°–î–ï–ö":
        await choose_paying_way(chat_id=message.chat.id, state=state)
    else:
        await enter_fio(message=message, state=state)

@dp.callback_query(lambda c: c.data in ["preview_yes", "preview_no"])
async def get_preview_info(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "preview_yes":
        primerka = "–Ω—É–∂–Ω–∞"
    if callback.data == "preview_no":
        primerka = "–Ω–µ –Ω—É–∂–Ω–∞"
    data = await state.get_data()
    if not data:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",show_alert=True)
        return
    await state.update_data(is_preview=primerka)
    await choose_paying_way(chat_id=callback.message.chat.id, state=state)


async def choose_paying_way(chat_id, state):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    back_mode = data.get("back_mode")

    text = "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:\n(–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –∫—É—Ä—å–µ—Ä–æ–º - 200‚ÇΩ, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∏—à—å —Å—Ä–∞–∑—É)"
    builder = InlineKeyboardBuilder()
    builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="pay_now")
    builder.button(text="üõç –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="pay_after_preview")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=chat_id,
        message_id=last_message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )


@dp.callback_query(lambda c: c.data.startswith("pay"))
async def get_paying_way(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "pay_now":
        pay_way = "—Å—Ä–∞–∑—É"
    else:
        pay_way = "–ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏"
        data = await state.get_data()
        if not data:
            await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",show_alert=True)
            return
        buy_from = data.get("buy_from")
        basket_count = await database.fetch_basket(user_id=callback.from_user.id, count=True)
        if (buy_from == "b") and (basket_count > 3):
            text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑–∞—Ç—å —Å –æ–ø–ª–∞—Ç–æ–π –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –º–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä—ã"
            builder = InlineKeyboardBuilder()
            builder.button(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="pay_now")
            builder.button(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="go_to_basket_from_menu")
            builder.adjust(1)
            await bot.edit_message_text(
                text=text,
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
            return
    await state.update_data(pay_way=pay_way)
    await enter_fio(message=callback.message, state=state)


async def enter_fio(message, state):
    data = await state.get_data()
    last_message_id = data.get("last_message_id", 0)
    back_mode = data.get("back_mode")

    text = "üë§ –ù–∞–ø–∏—à–∏ –¢–≤–æ–∏ –§–ò–û –¥–ª—è –∑–∞–∫–∞–∑–∞:"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    await state.set_state(OrderState.waiting_for_client_fio)
    await bot.edit_message_text(
        text=text,
        chat_id=message.chat.id,
        message_id=last_message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@dp.message(OrderState.waiting_for_client_fio)
async def enter_phone(message: types.Message, state: FSMContext):
    fio = message.text
    user_order_id = message.from_user.id
    data = await state.get_data()
    back_mode = data.get("back_mode")
    last_message_id = data.get("last_message_id")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    text = "‚òéÔ∏è –ù–∞–ø–∏—à–∏ –¢–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:"
    await bot.edit_message_text(
        text=text,
        chat_id=message.chat.id,
        message_id=last_message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.update_data(fio=fio, user_order_id=user_order_id)
    await state.set_state(OrderState.waiting_for_client_phone)

@dp.message(OrderState.waiting_for_client_phone)
async def enter_comment(message: types.Message, state: FSMContext):
    phone = str(message.text)
    data = await state.get_data()
    back_mode = data.get("back_mode")
    last_message_id = data.get("last_message_id")

    text = "üí¨ –ù–∞–ø–∏—à–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π¬ª"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", callback_data="check")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    builder.adjust(1)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.edit_message_text(
        text=text,
        chat_id=message.chat.id,
        message_id=last_message_id,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.set_state(OrderState.waiting_for_client_comment)
    await state.update_data(phone=phone)

@dp.message(OrderState.waiting_for_client_comment)
async def get_comment(message: types.Message, state: FSMContext):
    comment = str(message.text)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await state.update_data(comment=comment)
    await state.set_state(OrderState.waiting_none)
    await check_data(chat_id=message.chat.id, state=state, user_id=message.from_user.id)

@dp.callback_query(lambda c: c.data == "check")
async def check_data_no_comments(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if not data:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",
                              show_alert=True)
        return
    await check_data(chat_id=callback.message.chat.id, state=state, user_id=callback.from_user.id)
    await state.set_state(OrderState.waiting_none)



async def check_data(chat_id, state, user_id):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    back_mode = data.get("back_mode")
    delivery_mode = data.get("delivery_mode")
    address = data.get("address")
    is_preview = data.get("is_preview")
    phone = data.get("phone")
    fio = data.get("fio")
    comment = data.get("comment", "–Ω–µ—Ç")
    pay_way = data.get("pay_way")

    if delivery_mode == "–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–ï–ö":
        delivery_price = 300
        address_data = f"<b>–ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞:</b> {address}"
    elif delivery_mode == "–ö—É—Ä—å–µ—Ä—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –°–î–ï–ö":
        delivery_price = 500
        address_data = f"<b>–ê–¥—Ä–µ—Å:</b> {address}"
    elif delivery_mode == "–ü–æ—Å—Ç–∞–º–∞—Ç –°–î–ï–ö":
        delivery_price = 300
        address_data = f"<b>–ê–¥—Ä–µ—Å –ø–æ—Å—Ç–∞–º–∞—Ç–∞:</b> {address}"
        is_preview = "–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –≤ –ø–æ—Å—Ç–∞–º–∞—Ç"
    else:
        delivery_price = 300
        address_data = f"<b>–ê–¥—Ä–µ—Å:</b> {address}"
        is_preview = "–Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –ü–æ—á—Ç–æ–π –†–æ—Å—Å–∏–∏"
        pay_way = "—Å—Ä–∞–∑—É, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ü–æ—á—Ç–æ–π"
    if pay_way == "—Å—Ä–∞–∑—É":
        if delivery_mode in ["–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–ï–ö", "–ü–æ—Å—Ç–∞–º–∞—Ç –°–î–ï–ö", "–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏"]:
            delivery_price = 0
        else:
            delivery_price = 200

    text = (f"<b>–ü—Ä–æ–≤–µ—Ä—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            f"üöö <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_mode}\n"
            f"üè† {address_data}\n"
            f"üëü <b>–ü—Ä–∏–º–µ—Ä–∫–∞:</b> {is_preview}\n"
            f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {pay_way}\n"
            f"üë§ <b>–§–ò–û:</b> {fio}\n"
            f"‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {phone}\n"
            f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b> {comment}\n\n")
    if back_mode == "same":
        product_buy = data.get("product_buy")
        buying_product = product_buy["product"]
        size = product_buy["size"]
        price = await format_number(buying_product['price'])
        total_price = await format_number(buying_product['price'] + delivery_price)
        if delivery_price == 0:
            delivery_price_text = "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ"
        else:
            delivery_price_text = f"{delivery_price} ‚ÇΩ"
        sizes_length = await get_sizes_length(buying_product["art"])
        text += (f"<a href='{buying_product['channel_url']}'><b>{buying_product['name']}</b></a>\n"
                 f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {buying_product['art']}\n"
                 f"<b>–†–∞–∑–º–µ—Ä:</b> {size} (EU) ({sizes_length[size]} –º–º)\n"
                 f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ\n\n"
                 f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_price_text}\n"
                 f"<b>–ò—Ç–æ–≥–æ:</b> {total_price} ‚ÇΩ")
        button_data = f"buy_from_catalog:{size}"
    else:
        basket = await database.fetch_basket(user_id)
        i = 1
        total_price = 0
        for product in basket:
            if product["is_drop"] == 0:
                price = await format_number(product['price'])
                total_price += product['price']
            else:
                price = await format_number(product['drop_price'])
                total_price += product['drop_price']
            sizes_length = await get_sizes_length(product["art"])
            text += (f"<b>{i}.</b> <a href='{product['channel_url']}'><b>{product['name']}</b></a>\n"
                     f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product['art']}\n"
                     f"<b>–†–∞–∑–º–µ—Ä:</b> {product['size']} (EU) ({sizes_length[product['size']]})\n"
                     f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {price} ‚ÇΩ\n\n")
            i += 1
        total_price += delivery_price
        total_price = await format_number(total_price)
        if delivery_price == 0:
            delivery_price_text = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ"
        else:
            delivery_price_text = f"{delivery_price} ‚ÇΩ"
        text += (f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {delivery_price_text}\n"
                 f"<b>–ò—Ç–æ–≥–æ:</b> {total_price} ‚ÇΩ")
        button_data = f"buy_from_basket:{back_mode}"

    builder = InlineKeyboardBuilder()
    support_link = await get_support_link()
    builder.button(text="‚úÖ –î–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã", callback_data=f"order_is_ok")
    builder.button(text="üîÑ –í–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data=button_data)
    builder.button(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", url=support_link)
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=back_mode)
    builder.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=chat_id,
        message_id=last_message_id,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=builder.as_markup()
    )
    await state.update_data(delivery_price=delivery_price, is_preview=is_preview, pay_way=pay_way)



@dp.callback_query(lambda c: c.data == "order_is_ok")
async def make_order(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    if not data:
        await callback.answer(text="–ò–∑–≤–∏–Ω–∏, –±–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞—á–Ω–∏ –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ",
                              show_alert=True)
        return
    back_mode = data.get("back_mode")
    delivery_mode = data.get("delivery_mode")
    address = data.get("address")
    is_preview = data.get("is_preview")
    phone = data.get("phone")
    fio = data.get("fio")
    comment = data.get("comment", "–Ω–µ—Ç")
    pay_way = data.get("pay_way")
    delivery_price = data.get("delivery_price")
    builder = InlineKeyboardBuilder()
    if back_mode == "same":
        product_buy = data.get("product_buy")
        buying_product = product_buy["product"]
        buying_product["size"] = product_buy["size"]
        basket = []
        basket.append(buying_product)
    else:
        basket_db = await database.fetch_basket(user_id)
        basket = []
        for item in basket_db:
            if item["is_drop"] == 1:
                item["price"] = item["drop_price"]
            basket.append(item)
    builder.button(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders:ed")
    builder.button(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="catalog_back")
    builder.adjust(1)
    text = "‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –¢–µ–±–µ –æ—Ç–≤–µ—Ç—è—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –≤ <a href='https://t.me/nikix_info'>–ø–æ–¥–¥–µ—Ä–∂–∫—É</a>"
    order_id = await database.add_order(user_id=user_id, basket=basket, fio=fio, phone_number=phone, address=address, delivery_way=delivery_mode, preview=is_preview, pay_way=pay_way, status=0, comment=comment, delivery_price=delivery_price)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        disable_web_page_preview=True,
        reply_markup=builder.as_markup()
    )
    user_info = await bot.get_chat(user_id)
    first_name = user_info.first_name
    username = user_info.username
    text_for_chat = (f"‚úÖ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑! #<b>{order_id}</b>\n"
                     f"–°—Ç–∞—Ç—É—Å: üìù –û—Ñ–æ—Ä–º–ª–µ–Ω\n\n"
                     f"–ö–ª–∏–µ–Ω—Ç: @{username}\n"
                     f"–ò–º—è: {first_name}\n"
                     f"ID: {user_id}\n\n")
    text_for_chat += callback.message.text
    keyboard = InlineKeyboardBuilder()
    arg = f"admin_send_{user_id}"
    keyboard.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", url=f"https://t.me/nikix_store_bot?start=status_{order_id}")
    keyboard.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞", url=f"https://t.me/nikix_store_bot?start={arg}")
    keyboard.button(text="üë§ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ –ª—Å", url=f"https://t.me/{username}")
    keyboard.adjust(1)
    channel_message = await bot.send_message(text=text_for_chat, chat_id=CHAT_ORDERS_ID, parse_mode="HTML", reply_markup=keyboard.as_markup())
    trying = await database.change_channel_id_for_order(order_id=(order_id-2000), message_id=channel_message.message_id)
    if trying != 1:
        await send_admin_message(message=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id}: {trying}, –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–µ –±—É–¥—É—Ç –≤–∏–¥–Ω—ã")
    if back_mode != "same":
        await database.clear_basket(user_id=user_id, basket_id=0, is_all=1)



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ü–æ–∏—Å–∫
class SearchState(StatesGroup):
    waiting_for_art = State()
    waiting_none = State()



@dp.callback_query(lambda c: c.data == "search")
async def choose_search_way(callback: types.CallbackQuery, state: FSMContext):
    text = "–í—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–∏—Å–∫–∞:"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üå§ –ü–æ–∏—Å–∫ –ø–æ —Å–µ–∑–æ–Ω—É", callback_data="search_from_season")
    keyboard.button(text="üìè –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä—É", callback_data="search_from_size")
    keyboard.button(text="#Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É", callback_data="search_from_art")
    keyboard.button(text="‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="catalog_back")
    keyboard.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("search_from"))
async def choose_search_param(callback: types.CallbackQuery, state: FSMContext):
    mode = callback.data
    keyboard = InlineKeyboardBuilder()
    if mode == "search_from_season":
        text = "–í—ã–±–µ—Ä–∏ —Å–µ–∑–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        keyboard.button(text="üå¶ –î–µ–º–∏—Å–µ–∑–æ–Ω", callback_data="choose_season:demi")
        keyboard.button(text="‚òÄÔ∏è –õ–µ—Ç–æ", callback_data="choose_season:summer")
        keyboard.button(text="‚ùÑÔ∏è –ó–∏–º–∞", callback_data="choose_season:winter")
        keyboard.adjust(1)
    elif mode == "search_from_size":
        text = "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ (EU)"
        global sizes_cache
        sizes = []
        sizes_keys = {}
        for key in sizes_cache:
            for size in sizes_cache[key]:
                if size:
                    if "-" not in size:
                        sizes_keys[size] = float(size.split(" ")[0])
                    else:
                        size = size.split("-")[-1]
                        sizes_keys[size] = float(size.split("-")[-1])
        sorted_sizes = dict(sorted(sizes_keys.items(), key=lambda item: item[1]))
        for size in sorted_sizes:
            keyboard.button(text=f"{size}", callback_data=f"choose_size_search:{size}")
        keyboard.adjust(3)
    elif mode == "search_from_art":
        text = "–û—Ç–ø—Ä–∞–≤—å –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        await state.set_state(SearchState.waiting_for_art)
    keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search"))
    try:
        await bot.edit_message_text(
            text=text,
            chat_id=callback.message.chat.id,
            message_id=callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        await bot.send_message(
            text=text,
            chat_id=callback.message.chat.id,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    await state.update_data(search_back_mode=0, last_message_id=callback.message.message_id)

@dp.callback_query(lambda c: c.data.startswith("choose_season:"))
async def get_season(callback: types.CallbackQuery):
    season = callback.data.split(":")[1]
    if season == "demi":
        data = "–¥–µ–º–∏—Å–µ–∑–æ–Ω"
        text_season = "–¥–µ–º–∏—Å–µ–∑–æ–Ω–∞"
    elif season == "summer":
        data = "–ª–µ—Ç–æ"
        text_season = "–ª–µ—Ç–Ω–µ–≥–æ —Å–µ–∑–æ–Ω–∞"
    elif season == "winter":
        data = "–∑–∏–º–∞"
        text_season = "–∑–∏–º–Ω–µ–≥–æ —Å–µ–∑–æ–Ω–∞"
    else:
        print("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞")
        return
    #products = await database.fetch_products_from_search(mode=0, data=data)
    products = await get_search_products(search_mode="season", param=data)
    if products != []:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        back_mode = "search_from_season"
        await upload_user_index_brand(user_id=callback.from_user.id, current_index=0, brand="none", watch_mode=f"search:season:{data}", back_mode=back_mode)
        await send_or_update_product(callback.message.chat.id, callback.message.message_id, products[0], 0, len(products), is_edit=False, back_mode=back_mode)
    else:
        await callback.answer(text=f"–ü–æ–∫–∞ –Ω–µ—Ç –∫—Ä–æ—Å—Å–æ–≤–æ–∫ –¥–ª—è {text_season}", show_alert=True)

@dp.callback_query(lambda c: c.data.startswith("choose_size_search"))
async def choose_size_search(callback: types.CallbackQuery):
    global sizes_cache
    size = callback.data.split(":")[1]
    #products = await database.fetch_products_from_search(1, arts)
    products = await get_search_products("size", size, sizes_cache)
    if products != []:
        await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)
        back_mode = "search_from_size"
        await upload_user_index_brand(user_id=callback.from_user.id, current_index=0, brand="all", watch_mode=f"search:size:{size}", back_mode=back_mode)
        await send_or_update_product(callback.message.chat.id, callback.message.message_id, products[0], 0, len(products), is_edit=False, back_mode=back_mode)
    else:
        await callback.answer(f"–ü–æ–∫–∞ –Ω–µ—Ç –∫—Ä–æ—Å—Å–æ–≤–æ–∫ {size}-–≥–æ —Ä–∞–∑–º–µ—Ä–∞", show_alert=True)
        await send_admin_message(f"–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∫—Ä–æ—Å—Å–æ–≤–∫–∏ {size} —Ä–∞–∑–º–µ—Ä–∞")

@dp.message(SearchState.waiting_for_art)
async def get_art_from_message(message: types.Message, state: FSMContext):
    art = message.text.strip().upper()
    products = await get_search_products(search_mode="art", param=art)
    if products != []:
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        back_mode = "search_from_art"
        await send_or_update_product(message.chat.id, message.message_id, products[0], 0, len(products), is_edit=False, back_mode=back_mode)
        await state.clear()
    else:
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º: {art}. –ú–æ–∂–µ—à—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑:"
        keyboard = InlineKeyboardBuilder()
        keyboard.row(InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="search"))
        await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
        await bot.edit_message_text(
            text=text,
            chat_id=message.chat.id,
            message_id=last_message_id,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.callback_query(lambda c: c.data == "admin")
async def callback_admin(callback: types.CallbackQuery):
    await admin_panel(callback)

async def admin_panel(callback: types.CallbackQuery):
    if callback.from_user.id == ADMIN_ID:
        builder = InlineKeyboardBuilder()
        builder.button(text="üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_get_users")
        builder.button(text="üí¨ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="make_mailing")
        builder.button(text="‚ûï –¢–æ–≤–∞—Ä—ã (csv)", callback_data="add_products")
        builder.button(text="üñº –î–æ–ø —Ñ–æ—Ç–æ", callback_data="add_photo_links")
        builder.button(text="üì¶ –ù–∞–∑–Ω–∞—á–∏—Ç—å –¥—Ä–æ–ø", callback_data="create_drop")
        builder.button(text="‚õîÔ∏è –î—Ä–æ–ø –æ–∫–æ–Ω—á–µ–Ω", callback_data="stop_drop")
        builder.button(text="üñ• –ü—Ä–æ–∫—Å–∏", callback_data="edit_proxy")
        builder.button(text="üë• –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="edit_support")
        builder.button(text="üåê –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥", callback_data="admin_parse")
        builder.button(text="üìè –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–æ–≤ (txt)", callback_data="add_sizes_length")
        builder.button(text="üëü –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="get_current_product_list")
        builder.button(text="üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", callback_data="sure_admin_delete")
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_start")
        builder.adjust(2, 2, 2, 2, 1, 1, 1)
        try:
            await bot.edit_message_text(
                text="üõ† <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                parse_mode="HTML",
                reply_markup = builder.as_markup()
            )
        except Exception:
            await bot.send_message(
                text="<b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>",
                chat_id=callback.message.chat.id,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
    else:
        await send_admin_message(f"–î–æ–ª–±–∞—ë–± @{callback.from_user.username} —Å id: {callback.from_user.id} –ø—ã—Ç–∞–ª—Å—è –∑–∞–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")


# –°–æ–∑–¥–∞–Ω–∏–µ –¥—Ä–æ–ø–∞
@dp.callback_query(lambda c: c.data == "create_drop")
async def make_drop(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(adminStates.waiting_for_drop_password)
    text = ("–ë–æ—Ç –≤—Å–µ–≥–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –ø–∞—Ä–æ–ª—å, –µ—Å–ª–∏ –≤ —Ç–æ–≤–∞—Ä–µ is_drop —Ä–∞–≤–Ω–æ 1. "
            "–≠—Ç–æ –æ–∫–Ω–æ –≤—Å–µ–≥–æ –ª–∏—à—å –º–µ–Ω—è–µ—Ç –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –∏ –¥–∞—Ç—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è). –î—Ä–æ–ø –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ –∫–æ–≥–¥–∞ —Ç—ã –∑–∞–≥—Ä—É–∑–∏—à—å –∫—Ä–æ—Å—Å–æ–≤–∫–∏ —Å is_drop —Ä–∞–≤–Ω—ã–º 1. "
            "–î–∞–ª–µ–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—à—å –ø–∞—Ä–æ–ª—å –≤ –∫–∞–Ω–∞–ª –≤ –Ω—É–∂–Ω–æ–µ –≤—Ä–µ–º—è. "
            "–î–ª—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –¥—Ä–æ–ø–∞ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä is_drop, –¥–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–æ–ø'\n\n"
            "–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥-–ø–∞—Ä–æ–ª—å –¥–ª—è –¥—Ä–æ–ø–∞. –°–æ–≤–µ—Ç—É—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã –∫–∞–∫ –≤ anki")
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text=text,
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_message_id=callback.message.message_id)

@dp.message(adminStates.waiting_for_drop_password)
async def edit_drop_password(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    password = message.text.strip()
    global drop_password
    drop_password = password
    with open("bot_settings.json", "r") as f:
        jdata = json.load(f)
    jdata["drop_password"] = password
    with open("bot_settings.json", "w") as f:
        json.dump(jdata, f)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=f"‚úÖ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞ –¥—Ä–æ–ø–∞. –≠—Ç–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä '13:00 13 –º–∞—è'",
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_drop_start_date)

@dp.message(adminStates.waiting_for_drop_start_date)
async def edit_drop_password(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    start_date = message.text.strip()
    with open("bot_settings.json", "r") as f:
        jdata = json.load(f)
    jdata["drop_start_date"] = start_date
    with open("bot_settings.json", "w") as f:
        json.dump(jdata, f)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=f"‚úÖ –•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥—Ä–æ–ø–∞. –ü—Ä–∏–º–µ—Ä '13:00 14 –º–∞—è'",
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_drop_stop_date)

@dp.message(adminStates.waiting_for_drop_stop_date)
async def edit_drop_password(message: types.Message, state: FSMContext):
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    stop_date = message.text.strip()
    with open("bot_settings.json", "r") as f:
        jdata = json.load(f)
    jdata["drop_stop_date"] = stop_date
    with open("bot_settings.json", "w") as f:
        json.dump(jdata, f)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="–•–æ—Ä–æ—à–æ", callback_data="admin")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=f"‚úÖ –ü–∞—Ä–æ–ª—å –∏ –¥–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –£–¥–∞—á–Ω–æ–≥–æ –¥—Ä–æ–ø–∞!",
        reply_markup=builder.as_markup()
    )
    await cache_drop_info()
    await state.clear()
    await database.delete_drop_access()
    drop_access = await database.fetch_drop_access()
    await cache_drop_access(drop_access)


@dp.callback_query(lambda c: c.data == "stop_drop")
async def sure_stop_drop(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="sure_stop_drop")
    builder.button(text="–ù–µ—Ç", callback_data="admin")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥—Ä–æ–ø? –£–±–µ–¥–∏—Å—å —á—Ç–æ –≤—Ä–µ–º—è –¥—Ä–æ–ø–∞ –ø–æ–¥–æ—à–ª–æ –∫ –∫–æ–Ω—Ü—É.",
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "sure_stop_drop")
async def admin_stop_drop(callback: types.CallbackQuery):
    await database.stop_drop()
    products = await database.fetch_products("all")
    await redis_delete_all_products()  # –ï—Å–ª–∏ –≤—ã–ª–µ–∑–µ—Ç –æ—à–∏–±–∫–∞ —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    await cache_products(products)
    await database.delete_drop_access()
    drop_access = await database.fetch_drop_access()
    await cache_drop_access(drop_access)
    builder = InlineKeyboardBuilder()
    builder.button(text="Ok", callback_data="admin")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –¥—Ä–æ–ø –∑–∞–∫–æ–Ω—á–µ–Ω",
        reply_markup=builder.as_markup()
    )



@dp.callback_query(lambda c: c.data == "edit_support")
async def admin_edit_support(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(adminStates.waiting_for_new_support)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id = callback.message.chat.id,
        message_id = callback.message.message_id,
        text = "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –≤ –≤–∏–¥–µ: http://t.me/nikix_info",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_message_id=callback.message.message_id)


@dp.message(adminStates.waiting_for_new_support)
async def edit_support_json(message: types.Message, state: FSMContext):
    support_link = message.text.strip()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    with open("bot_settings.json", "r") as f:
        jdata = json.load(f)
    jdata["support_link"] = support_link
    with open("bot_settings.json", "w") as f:
        json.dump(jdata, f)
    await cache_support_link(support_link)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–∫", callback_data="admin")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=f"‚úÖ –°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω—ë–Ω–∞ –Ω–∞ {support_link}",
        reply_markup=builder.as_markup()
    )
    await state.clear()


@dp.callback_query(lambda c: c.data == "admin_parse")
async def start_admin_parse(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="Ok", callback_data="admin")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞—á–∞–ª—Å—è",
        reply_markup=builder.as_markup()
    )
    await update_cache()


@dp.callback_query(lambda c: c.data == "edit_proxy")
async def admin_edit_proxy(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(adminStates.waiting_for_new_proxy)
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id = callback.message.chat.id,
        message_id = callback.message.message_id,
        text = "–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏ (—Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª. —Ç–µ–∫—Å—Ç) –≤ –≤–∏–¥–µ: http://quIFjeCM1N:INDeocNfeO@51.15.15.230:9061",
        reply_markup=builder.as_markup()
    )
    await state.update_data(last_message_id=callback.message.message_id)


@dp.message(adminStates.waiting_for_new_proxy)
async def edit_proxy_json(message: types.Message, state: FSMContext):
    proxy = message.text.strip()
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    with open("bot_settings.json", "r") as f:
        jdata = json.load(f)
    jdata["proxy"] = proxy
    with open("bot_settings.json", "w") as f:
        json.dump(jdata, f)
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–∫", callback_data="admin")
    await bot.edit_message_text(
        chat_id=message.chat.id,
        message_id=last_message_id,
        text=f"‚úÖ –ü—Ä–æ–∫—Å–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {proxy}",
        reply_markup=builder.as_markup()
    )
    await state.clear()


@dp.callback_query(lambda c: c.data == "get_users_for_admin")
async def get_users_admin(callback: types.CallbackQuery):
    await database.fetch_users(onlyID=0)


@dp.message(adminStates.waiting_for_message)
async def get_message_for_client(message: types.Message, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    text_for_client = message.text
    await state.update_data(text_for_client=text_for_client, mes_with_but=0)
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    user_id = data.get("user_id_for_admin")
    username = await database.fetch_username_from_id(user_id)
    text = f"–¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {username[0]}\n\n{text_for_client}\n\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send:1")
    keyboard.button(text="üì¶ –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'", callback_data="add_orders_but")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_send:0")
    keyboard.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=message.chat.id,
        message_id=last_message_id,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data == "add_orders_but")
async def add_orders_button(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text_for_client = data.get("text_for_client")
    await state.update_data(mes_with_but=1)
    user_id = data.get("user_id_for_admin")
    username = await database.fetch_username_from_id(user_id)
    text = f"‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞\n–¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {username[0]}\n\n{text_for_client}\n\n–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üí¨ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_send:1")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_send:0")
    keyboard.adjust(1)
    await bot.edit_message_text(
        text=text,
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("admin_send"))
async def send_message_from_admin(callback: types.CallbackQuery, state: FSMContext):
    if callback.data.split(":")[1] == "1":
        data = await state.get_data()
        user_id = data.get("user_id_for_admin")
        text_for_client = data.get("text_for_client")
        mes_with_but = data.get("mes_with_but")
        try:
            builder = InlineKeyboardBuilder()
            # url="https://t.me/nikix_store_bot?start=-1"
            if mes_with_but == 1:
                builder.button(text="üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders:sd")
            await bot.send_message(text=text_for_client, chat_id=user_id, reply_markup=builder.as_markup())
        except Exception as e:
            await bot.edit_message_text(
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}",
                chat_id=ADMIN_ID,
                message_id=callback.message.message_id,
                parse_mode="HTML",
            )
            await state.clear()
            return
        await bot.edit_message_text(
            text="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            chat_id=ADMIN_ID,
            message_id=callback.message.message_id,
            parse_mode="HTML",
        )
    else:
        await bot.delete_message(chat_id=ADMIN_ID, message_id=callback.message.message_id)
    await state.clear()

@dp.callback_query(lambda c: c.data.startswith("client_mes_ok"))
async def delete_client_message(callback: types.CallbackQuery):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)


async def choose_status(message, arg):
    if message.from_user.id == ADMIN_ID:
        order_id = int(arg.split("_")[1])
        text = f"–í—ã–±–µ—Ä–∏ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞: #{order_id}"
        builder = InlineKeyboardBuilder()
        builder.button(text="üìù –û—Ñ–æ—Ä–º–ª–µ–Ω", callback_data=f"set_order_status:0:{order_id}")
        builder.button(text="üöö –í –ø—É—Ç–∏", callback_data=f"set_order_status:1:{order_id}")
        builder.button(text="üïò –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è", callback_data=f"set_order_status:2:{order_id}")
        builder.button(text="‚úÖ –ü–æ–ª—É—á–µ–Ω", callback_data=f"set_order_status:3:{order_id}")
        builder.button(text="‚ùå –û—Ç–º–µ–Ω—ë–Ω", callback_data=f"set_order_status:4:{order_id}")
        builder.adjust(1)
        await bot.send_message(text=text, chat_id=ADMIN_ID, reply_markup=builder.as_markup())



async def decrypt_status(status):
    statuses = {0: "üìù –û—Ñ–æ—Ä–º–ª–µ–Ω", 1: "üöö –í –ø—É—Ç–∏", 2: "üïò –û–∂–∏–¥–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏—è", 3: "‚úÖ –ü–æ–ª—É—á–µ–Ω", 4: "‚ùå –û—Ç–º–µ–Ω—ë–Ω"}
    return statuses[status]



@dp.callback_query(lambda c: c.data.startswith("set_order_status"))
async def go_to_change_status(callback: types.CallbackQuery):
    await change_status(callback.data, callback.message.message_id)

async def change_status(callback_data, message_id):
    callback_data = callback_data.split(":")
    status_num = callback_data[1]
    order_id = int(callback_data[2]) - 2000
    if status_num == '4':
        cancel_text = f"–û—Ç–º–µ–Ω—ë–Ω –∑–∞–∫–∞–∑ #{order_id + 2000}"
        await send_admin_message(cancel_text)
        await bot.send_message(text=cancel_text, chat_id=CHAT_ORDERS_ID)
    status = await decrypt_status(int(status_num))
    message_channel_id = await database.fetch_message_channel_id(order_id)
    trying = await database.set_order_status(order_id=order_id, status=status_num)
    if trying != 1:
        await send_admin_message(message=f"–û—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n{trying}")
        logger.error(f"–û—à–∏–±–∫–∞, —Å—Ç–∞—Ç—É—Å #{order_id} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:\n{trying}")
        return
    order_list = await database.fetch_orders(user_id=message_channel_id, id=order_id)
    order = order_list[0]
    user_info = await bot.get_chat(order["user_id"])
    first_name = user_info.first_name
    username = user_info.username
    text_for_chat = (f"üì¶ –ó–∞–∫–∞–∑: #<b>{order_id+2000}</b>\n"
                     f"–°—Ç–∞—Ç—É—Å: {status}\n\n"
                     f"–ö–ª–∏–µ–Ω—Ç: @{username}\n"
                     f"–ò–º—è: {first_name}\n"
                     f"ID: {order["user_id"]}\n"
                     f"–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order['when_buy']}\n\n")
    text_for_chat += (f"üöö <b>–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {order['delivery_way']}\n"
                      f"üè† <b>–ê–¥—Ä–µ—Å:</b> {order['address']}\n"
                      f"üëü <b>–ü—Ä–∏–º–µ—Ä–∫–∞:</b> {order['preview']}\n"
                      f"üíµ <b>–û–ø–ª–∞—Ç–∞:</b> {order['pay_way']}\n"
                      f"üë§ <b>–§–ò–û:</b> {order['fio']}\n"
                      f"‚òéÔ∏è <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {order['phone']}\n"
                      f"üí¨ <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É:</b> {order['comment']}\n\n")
    i = 1
    total_price = 0
    for product in order["products"]:
        text_for_chat += (f"<b>{i}.</b> <a href='{product['channel_url']}'><b>{product['name']}</b></a>\n"
                          f"<b>–ê—Ä—Ç–∏–∫—É–ª:</b> {product['art']}\n"
                          f"<b>–†–∞–∑–º–µ—Ä:</b> {product['size']} (EU)\n"
                          f"<b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> {product['price']} ‚ÇΩ\n\n")
        i += 1
        total_price += product['price']
    total_price += order['delivery_price']
    text_for_chat += (f"<b>–î–æ—Å—Ç–∞–≤–∫–∞:</b> {order['delivery_price']} ‚ÇΩ\n"
                      f"<b>–í—Å–µ–≥–æ:</b> {total_price} ‚ÇΩ")

    keyboard = InlineKeyboardBuilder()
    arg = f"admin_send_{order["user_id"]}"
    keyboard.button(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞", url=f"https://t.me/nikix_store_bot?start=status_{order_id+2000}")
    keyboard.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞", url=f"https://t.me/nikix_store_bot?start={arg}")
    keyboard.button(text="üë§ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É –≤ –ª—Å", url=f"https://t.me/{username}")
    keyboard.adjust(1)

    try:
        await bot.edit_message_text(
            text=text_for_chat,
            chat_id=CHAT_ORDERS_ID,
            message_id=message_channel_id,
            disable_web_page_preview=True,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception as e:
        await send_admin_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:{e}")
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å:{e}")
    if message_id != 0:
        builder = InlineKeyboardBuilder()
        arg = f"admin_send_{order["user_id"]}"
        builder.button(text="üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞", url=f"https://t.me/nikix_store_bot?start={arg}")
        await bot.edit_message_text(
            text="‚úÖ –°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω",
            chat_id=ADMIN_ID,
            message_id=message_id,
            disable_web_page_preview=True,
            parse_mode="HTML",
            reply_markup=builder.as_markup()
        )



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –†–∞—Å—Å—ã–ª–∫–∞
@dp.callback_query(lambda c: c.data == "make_mailing")
async def mailing_settings(callback: types.CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç", callback_data="mail_only_text")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    try:
        await bot.edit_message_text(
            text="üñº –ù–∏–∫–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å 1 —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            chat_id=ADMIN_ID,
            message_id=callback.message.message_id,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    except Exception:
        await bot.send_message(
            text="üñº –ù–∏–∫–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å 1 —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
            chat_id=ADMIN_ID,
            parse_mode="HTML",
            reply_markup=keyboard.as_markup()
        )
    await state.set_state(adminStates.waiting_for_mail_photo)

@dp.callback_query(lambda c: c.data == "mailing_cancel")
async def cancel_mailing(callback: types.CallbackQuery, state: FSMContext):
    await admin_panel(callback)
    await state.clear()

@dp.message(adminStates.waiting_for_mail_photo)
async def get_mail_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    mail_text= message.caption
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –î–∞", callback_data="checked_mail:photo")
    keyboard.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="make_mailing")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    await bot.send_photo(chat_id=ADMIN_ID, photo=photo_id, caption=mail_text, parse_mode="HTML", reply_markup=keyboard.as_markup())
    await state.update_data(photo_id=photo_id, mail_text=mail_text)

@dp.callback_query(lambda c: c.data == "mail_only_text")
async def only_text_mail_start(callback: types.CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–†–∞—Å—Å—ã–ª–∫–∞ —Å —Ñ–æ—Ç–æ", callback_data="make_mailing")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    await bot.edit_message_text(
        text="üìù –¢–æ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏",
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(adminStates.waiting_for_mail_text)

@dp.message(adminStates.waiting_for_mail_text)
async def get_mail_text(message: types.Message, state: FSMContext):
    mail_text = message.text
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚úÖ –î–∞", callback_data="checked_mail:text")
    keyboard.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="mail_only_text")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    await bot.send_message(
        text=mail_text,
        chat_id=ADMIN_ID,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await state.update_data(mail_text=mail_text)

@dp.callback_query(lambda c: c.data.startswith("checked_mail:"))
async def add_but_for_mail(callback: types.CallbackQuery, state: FSMContext):
    text = "–ù—É–∂–Ω–æ –ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É, –Ω–∞–ø—Ä–∞–≤–ª—è—é—â—É—é –≤ –∫–∞—Ç–∞–ª–æ–≥?"
    format_mail = callback.data.split(":")[1]
    await state.update_data(format_mail=format_mail)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="–° –∫–Ω–æ–ø–∫–æ–π", callback_data="add_but_mail")
    keyboard.button(text="–ë–µ–∑ –∫–Ω–æ–ø–∫–∏", callback_data="ready_to_mailing:nobut")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    await bot.send_message(
        text=text,
        chat_id=ADMIN_ID,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data == ("add_but_mail"))
async def add_but_for_mailing(callback: types.CallbackQuery, state: FSMContext):
    text = "–ù–∏–∫–∏—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: üî• –ù–æ–≤–∏–Ω–∫–∏):"
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    await bot.edit_message_text(
        text=text,
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )
    await state.set_state(adminStates.waiting_for_mail_but_text)

@dp.message(adminStates.waiting_for_mail_but_text)
async def get_but_text_mailing(message: types.Message, state: FSMContext):
    but_text = message.text
    await state.update_data(but_text=but_text)
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text=but_text, callback_data="ready_to_mailing:but")
    keyboard.button(text="üîÑ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="add_but_mail")
    keyboard.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    keyboard.adjust(1)
    await bot.send_message(
        text="–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –µ—Å–ª–∏ –≥–æ—Ç–æ–≤ –ø–µ—Ä–µ–π—Ç–∏ –¥–∞–ª—å—à–µ",
        chat_id=ADMIN_ID,
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("ready_to_mailing:"))
async def ready_mailing(callback: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    format_mail = state_data.get("format_mail")
    mail_text = state_data.get("mail_text")

    keyboard = InlineKeyboardBuilder()
    is_but = callback.data.split(":")[1]
    if is_but == "but":
        but_text = state_data.get("but_text")
        keyboard.button(text=but_text, callback_data="brand:all:from_mail")
    if format_mail == "photo":
        photo_id = state_data.get("photo_id")
        await bot.send_photo(photo=photo_id, caption=mail_text, chat_id=ADMIN_ID, parse_mode="HTML", reply_markup=keyboard.as_markup())
    else:
        await bot.send_message(text=mail_text, chat_id=ADMIN_ID, parse_mode="HTML", reply_markup=keyboard.as_markup())

    builder = InlineKeyboardBuilder()
    builder.button(text="üí¨ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"start_mailing:{is_but}")
    builder.button(text="‚úâÔ∏è –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data=f"ready_to_mailing:{is_but}")
    builder.button(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="make_mailing")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="mailing_cancel")
    builder.adjust(1)
    await bot.send_message(text="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:", chat_id=ADMIN_ID, parse_mode="HTML", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data.startswith("start_mailing:"))
async def start_mail(callback: types.CallbackQuery, state: FSMContext):
    state_data = await state.get_data()
    format_mail = state_data.get("format_mail")
    mail_text = state_data.get("mail_text")
    keyboard = InlineKeyboardBuilder()
    is_but = callback.data.split(":")[1]
    if is_but == "but":
        but_text = state_data.get("but_text")
        keyboard.button(text=but_text, callback_data="brand:all:from_mail")
    if format_mail == "photo":
        photo_id = state_data.get("photo_id")

    users = await database.fetch_users(onlyID=1)
    await bot.edit_message_text(text="–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞–ª–∞—Å—å", chat_id=ADMIN_ID, message_id=callback.message.message_id)
    for user_id in users:
        try:
            if format_mail == "photo":
                await bot.send_photo(photo=photo_id, caption=mail_text, chat_id=user_id, parse_mode="HTML", reply_markup=keyboard.as_markup())
            else:
                await bot.send_message(text=mail_text, chat_id=user_id, parse_mode="HTML", reply_markup=keyboard.as_markup())
            await asyncio.sleep(0.1) # –ó–∞–¥–µ—Ä–∂–∫–∞ –æ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        except Exception as e:
            error_text = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}"
            await send_admin_message(error_text)
    await send_admin_message("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞")
    await state.clear()



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@dp.callback_query(lambda c: c.data == "admin_get_users")
async def get_bot_users(callback: types.CallbackQuery):
    users = await database.fetch_users(onlyID=0)
    file_content = "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    i = 1
    for user in users:
        file_content += f"{i}. username: {user['user_name']}, –∏–º—è: {user['first_name']}, id: {user['user_id']}\n"
        i += 1

    with open("users.txt", "w", encoding="utf-8") as file:
        file.write(file_content)

    with open("users.txt", "rb") as file:
        file_data = file.read()
        input_file = BufferedInputFile(file_data, filename="users.txt")
        await bot.send_document(ADMIN_ID, input_file, caption="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    os.remove("users.txt")



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã
@dp.callback_query(lambda c: c.data == "sure_admin_delete")
async def sure_delete_products(callback: types.CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞", callback_data="delete_all_products")
    builder.button(text="–ù–µ—Ç", callback_data="admin")
    await bot.edit_message_text(
        text="–£–≤–µ—Ä–µ–Ω —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã?",
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "delete_all_products")
async def admin_delete_products(callback: types.CallbackQuery):
    try:
        await database.delete_all_data()
        await redis_delete_all_products()
        text = "–í—Å–µ —Ç–æ–≤–∞—Ä—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã"
    except Exception as e:
        text = f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}"
    builder = InlineKeyboardBuilder()
    builder.button(text="–û–∫", callback_data="admin")
    await bot.edit_message_text(
        text=text,
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∏–∑ csv
@dp.callback_query(lambda c: c.data == "add_products")
async def request_file_csv(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞",callback_data="admin")
    await bot.edit_message_text(
        text="–û—Ç–ø—Ä–∞–≤—å csv —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫—Ä–æ—Å—Å–æ–≤–æ–∫. (–ú–∞–∫—Å 50 –º–±)",
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_csv_file)

@dp.message(adminStates.waiting_for_csv_file)
async def get_csv_products(message: types.Message, state: FSMContext):
    if message.document.file_name.endswith('.csv'):
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        temp_file_path = f"temp_{file_id}.csv"
        await bot.download_file(file_path, temp_file_path)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úîÔ∏è –û–∫", callback_data="admin")
        builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="admin")
        builder.adjust(1)
        try:
            await database.upload_products(temp_file_path)
            products = await database.fetch_products("all")
            await redis_delete_all_products() # –ï—Å–ª–∏ –≤—ã–ª–µ–∑–µ—Ç –æ—à–∏–±–∫–∞ —Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç—É —Å—Ç—Ä–æ–∫—É
            await cache_products(products)
            await bot.send_message(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
        except Exception as e:
            await bot.send_message(text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
        os.remove(temp_file_path)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª .csv")



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ü–æ–º–µ–Ω—è—Ç—å —Ü–µ–Ω—É
@dp.callback_query(lambda c: c.data == "change_price")
async def admin_change_price(callback: types.CallbackQuery, state: FSMContext):
    index = await get_brand_and_index(callback.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    if products == []:
        await callback.answer(text="–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥", show_alert=True)
        return
    product = products[current_index]
    old_price = await format_number(product["price"])
    text = f"–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Ü–µ–Ω—É (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 20000) –¥–ª—è {product['name']} –≤–º–µ—Å—Ç–æ {old_price} ‚ÇΩ:"
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_change_price")

    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=product["photo_url"], caption=text, parse_mode="HTML"),
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_new_price)
    await state.update_data(last_message_id=callback.message.message_id)

@dp.callback_query(lambda c: c.data == "cancel_change_price")
async def back_to_catalog_admin_price(callback: types.CallbackQuery, state: FSMContext):
    index = await get_brand_and_index(callback.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    back_mode = index["back_mode"]
    total_products = len(products)
    await send_or_update_product(callback.message.chat.id, callback.message.message_id,
                                 products[current_index], current_index, total_products, is_edit=True,
                                 back_mode=back_mode)

@dp.message(adminStates.waiting_for_new_price)
async def get_new_admin_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    index = await get_brand_and_index(message.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    last_message_id = data.get("last_message_id", -1)
    product = products[current_index]
    if products == []:
        await send_admin_message("–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥")
        return
    builder = InlineKeyboardBuilder()
    try:
        new_price = int(message.text)
        formated_price = await format_number(new_price)
        caption = f"–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {formated_price} ‚ÇΩ\n–ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ü–µ–Ω—É –∑–∞–Ω–æ–≤–æ:"
        builder.button(text="‚úÖ –ü–æ–º–µ–Ω—è—Ç—å —Ü–µ–Ω—É", callback_data=f"finally_price:{new_price}")
    except Exception:
        caption = "–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –≤–∏–¥–µ —á–∏—Å–ª–∞. –ü—Ä–∏—à–ª–∏ –µ—â—ë —Ä–∞–∑:"

    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_change_price")
    builder.adjust(1)
    await bot.delete_message(chat_id=ADMIN_ID, message_id=message.message_id)
    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=product["photo_url"], caption=caption, parse_mode="HTML"),
        chat_id=ADMIN_ID,
        message_id=last_message_id,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data.startswith("finally_price:"))
async def finally_change_price(callback: types.CallbackQuery):
    index = await get_brand_and_index(callback.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    product = products[current_index]
    total_products = len(products)

    new_price = int(callback.data.split(":")[1])

    if products == []:
        await send_admin_message("–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥")
        return
    await database.change_price(new_price=new_price, art=product["art"])
    if brand != -1:
        products_from_brand = await database.fetch_products(brand)
        products = products_from_brand[::-1]
        await redis_delete_all_products()
        await cache_products(products)
    await send_or_update_product(callback.message.chat.id, callback.message.message_id,
                                 products[current_index], current_index, total_products, is_edit=True,
                                 back_mode=back_mode)



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data == "admin_delete_product")
async def sure_delete_admin_product(callback: types.CallbackQuery):
    index = await get_brand_and_index(callback.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    if products == []:
        await send_admin_message("–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥")
        return
    product = products[current_index]
    builder = InlineKeyboardBuilder()
    builder.button(text="–î–∞, —É–≤–µ—Ä–µ–Ω", callback_data="yes_delete_product")
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_change_price")
    builder.adjust(1)
    await bot.edit_message_media(
        media=types.InputMediaPhoto(media=product["photo_url"], caption=f"–£–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å <b>{product['name']}</b>?", parse_mode="HTML"),
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )

@dp.callback_query(lambda c: c.data == "yes_delete_product")
async def delete_admin_product(callback: types.CallbackQuery):
    index = await get_brand_and_index(callback.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    back_mode = index["back_mode"]
    products = await get_products_from_index(watch_mode, brand)
    total_products = len(products)
    if products == []:
        await send_admin_message("–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥")
        return
    product = products[current_index]
    await database.delete_product(product["art"])
    products = await database.fetch_products("all")
    await redis_delete_all_products()
    await cache_products(products)
    try:
        await send_or_update_product(callback.message.chat.id, callback.message.message_id,
                                     products[current_index], current_index, total_products, is_edit=True,
                                     back_mode=back_mode)
    except Exception:
        await start_handler(message=callback.message)



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ó–∞–º–µ–Ω–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç —É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(lambda c: c.data == "change_post_link")
async def edit_post_link(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    new_message = await bot.send_message(text="–û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏–ª–∏ 0 –µ—Å–ª–∏ –µ—ë –ø–æ–∫–∞ –Ω–µ—Ç", chat_id=callback.from_user.id)
    await state.update_data(last_message_id=new_message.message_id)
    await state.set_state(adminStates.waiting_for_post_link)

@dp.message(adminStates.waiting_for_post_link)
async def get_new_post_link(message: types.Message, state: FSMContext):
    link = message.text
    index = await get_brand_and_index(ADMIN_ID)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    if products == []:
        await send_admin_message("–û—à–∏–±–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—É—Å—Ç. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥")
        return
    product = products[current_index]
    await database.edit_post_link(art=product["art"], new_link=link)
    await redis_delete_all_products()
    products = await database.fetch_products("all")
    await cache_products(products)

    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    builder = InlineKeyboardBuilder()
    builder.button(text="Ok", callback_data="same")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    await bot.edit_message_text(text=f"–°—Å—ã–ª–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {link}", chat_id=message.chat.id, message_id=last_message_id, reply_markup=builder.as_markup())
    await state.clear()



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ–ø —Ñ–æ—Ç–æ –∏–∑ csv
@dp.callback_query(lambda c: c.data == "add_photo_links")
async def request_file_csv(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞",callback_data="admin")
    await bot.edit_message_text(
        text="–û—Ç–ø—Ä–∞–≤—å csv —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ. (–ú–∞–∫—Å 50 –º–±)",
        chat_id=ADMIN_ID,
        message_id=callback.message.message_id,
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_photos_csv_file)

@dp.message(adminStates.waiting_for_photos_csv_file)
async def get_csv_products(message: types.Message, state: FSMContext):
    if message.document.file_name.endswith('.csv'):
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        temp_file_path = f"temp_{file_id}.csv"
        await bot.download_file(file_path, temp_file_path)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úîÔ∏è –û–∫", callback_data="admin")
        builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="admin")
        builder.adjust(1)
        try:
            await database.upload_photo_links(temp_file_path)
            await bot.send_message(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
            await database.fetchall_dop_photos()
        except Exception as e:
            await bot.send_message(text=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
        os.remove(temp_file_path)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª .csv")



async def show_all_photos(arg, message, state):
    index = await get_brand_and_index(message.from_user.id)
    brand = index["brand"]
    current_index = int(index["current_index"])
    watch_mode = index["watch_mode"]
    products = await get_products_from_index(watch_mode, brand)
    product = products[current_index]
    data_arg = arg.split("photos")
    art = data_arg[0]
    last_message_id = data_arg[1]
    other_links = await database.fetch_photo_links_by_art(art)
    links = []
    links.append(product["photo_url"])
    for link in other_links:
        links.append(link)
    media_group = []
    for url in links:
        media_group.append(types.InputMediaPhoto(media=url))
    builder = InlineKeyboardBuilder()
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="hide_photos")
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
    messages = await bot.send_media_group(media=media_group, chat_id=message.chat.id)
    message_ids = [mes.message_id for mes in messages]
    await state.update_data(message_ids=message_ids)
    await bot.send_message(text=f"<b>{product['name']}</b>", chat_id=message.chat.id, parse_mode="HTML", reply_markup=builder.as_markup())


# –£–±—Ä–∞—Ç—å 4 —Ñ–æ—Ç–æ
@dp.callback_query(lambda c: c.data == "hide_photos")
async def hide_product_photos(callback: types.CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    data = await state.get_data()
    message_ids = data.get("message_ids")
    for mes_id in message_ids:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=mes_id)



# !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
# –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
@dp.callback_query(lambda c: c.data == "get_current_product_list")
async def get_bot_users(callback: types.CallbackQuery):
    db_products = await database.fetch_products("all")
    products = sorted(db_products, key=lambda item: int(item["id"]))
    file_content = ""
    i = 0
    for product in products:
        file_content += f"{product['type']},{product['name']},{product['maker'].replace(",", ":")},{product['material'].replace(", ", ":")},{product['season'].replace(", ", ":")},{product['brand']},{product['price']},{product['art']},{product['photo_url']},{product['channel_url']},{product['anki_url']}\n"
        i += 1

    with open("products.txt", "w", encoding="utf-8") as file:
        file.write(file_content)

    with open("products.txt", "rb") as file:
        file_data = file.read()
        input_file = BufferedInputFile(file_data, filename="products.txt")
        await bot.send_document(ADMIN_ID, input_file, caption="üëü –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤")

    os.remove("products.txt")



# –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–∞–±–ª–∏—Ü—ã —Ä–∞–∑–º–µ—Ä–æ–≤ txt
@dp.callback_query(lambda c: c.data == "add_sizes_length")
async def ack_txt_sizes_length(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin")
    await bot.edit_message_text(
        chat_id=callback.message.chat.id,
        message_id=callback.message.message_id,
        text="–û—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Å –¥–ª–∏–Ω–∞–º–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ –≤ .txt (–ü–æ–∫–∞ —á—Ç–æ json –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É –æ—Ç–ø—Ä–∞–≤—å –ø–æ–ª–Ω—ã–π —Ñ–∞–π–ª)",
        reply_markup=builder.as_markup()
    )
    await state.set_state(adminStates.waiting_for_sizes_length)

@dp.message(adminStates.waiting_for_sizes_length)
async def get_csv_products(message: types.Message, state: FSMContext):
    if message.document.file_name.endswith('.txt'):
        file_id = message.document.file_id
        file = await bot.get_file(file_id)
        file_path = file.file_path
        temp_file_path = f"temp_{file_id}.txt"
        await bot.download_file(file_path, temp_file_path)
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úîÔ∏è –û–∫", callback_data="admin")
        builder.button(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="admin")
        builder.adjust(1)
        with open(temp_file_path) as file:
            all_length = []
            for row in file:
                pices = row.split(";")
                art = pices[0]
                sizes = pices[1]
                sizes = sizes.split(",")
                del sizes[-1]
                sizes_length = {}
                for size in sizes:
                    size_pices = size.split(":")
                    eu = size_pices[0].strip()
                    length = size_pices[1].strip()
                    sizes_length[eu] = length
                length_dict = {"art": art, "sizes": sizes_length}
                all_length.append(length_dict)
        with open('sizes_lengths.json', 'w', encoding='utf-8') as f:
            json.dump(all_length, f, ensure_ascii=False, indent=2)
        await cache_sizes_length()
        await bot.send_message(text="–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞", chat_id=ADMIN_ID, reply_markup=builder.as_markup())
        os.remove(temp_file_path)
        await state.clear()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª .txt")


if __name__ == '__main__':
    dp.run_polling(bot, skip_updates=True)